{"ast":null,"code":"import { SegmentType } from \"./SegmentType.js\";\nexport function drawPath(ctx, radius, path) {\n  const firstIndex = 0,\n    firstSegment = path.segments[firstIndex],\n    firstValue = firstSegment.values[firstIndex];\n  ctx.moveTo(firstValue.x * radius, firstValue.y * radius);\n  for (const segment of path.segments) {\n    const value = segment.values[firstIndex],\n      index2 = 1,\n      index3 = 2,\n      index4 = 3;\n    switch (segment.type) {\n      case SegmentType.line:\n        ctx.lineTo(value.x * radius, value.y * radius);\n        break;\n      case SegmentType.bezier:\n        ctx.bezierCurveTo(segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x * radius, segment.values[index3].y * radius, segment.values[index4].x * radius, segment.values[index4].y * radius);\n        break;\n      case SegmentType.quadratic:\n        ctx.quadraticCurveTo(segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x * radius, segment.values[index3].y * radius);\n        break;\n      case SegmentType.arc:\n        ctx.arc(value.x * radius, value.y * radius, segment.values[index2].x * radius, segment.values[index3].x, segment.values[index3].y);\n        break;\n      case SegmentType.ellipse:\n        ctx.ellipse(value.x * radius, value.y * radius, segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x, segment.values[index4].x, segment.values[index4].y);\n    }\n  }\n  if (!path.half) {\n    return;\n  }\n  const lengthOffset = 1,\n    minLength = 0;\n  for (let i = path.segments.length - lengthOffset; i >= minLength; i--) {\n    const segment = path.segments[i],\n      value = segment.values[firstIndex],\n      index2 = 1,\n      index3 = 2;\n    switch (segment.type) {\n      case SegmentType.line:\n        ctx.lineTo(value.x * -radius, value.y * radius);\n        break;\n      case SegmentType.bezier:\n        ctx.bezierCurveTo(-segment.values[index3].x * radius, segment.values[index3].y * radius, -segment.values[index2].x * radius, segment.values[index2].y * radius, value.x * radius, value.y * radius);\n        break;\n      case SegmentType.quadratic:\n        ctx.quadraticCurveTo(-segment.values[index2].x * radius, segment.values[index2].y * radius, -segment.values[index3].x * radius, segment.values[index3].y * radius);\n        break;\n      case SegmentType.arc:\n      case SegmentType.ellipse:\n      default:\n        break;\n    }\n  }\n}","map":{"version":3,"names":["SegmentType","drawPath","ctx","radius","path","firstIndex","firstSegment","segments","firstValue","values","moveTo","x","y","segment","value","index2","index3","index4","type","line","lineTo","bezier","bezierCurveTo","quadratic","quadraticCurveTo","arc","ellipse","half","lengthOffset","minLength","i","length"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/shape-path/browser/Utils.js"],"sourcesContent":["import { SegmentType } from \"./SegmentType.js\";\nexport function drawPath(ctx, radius, path) {\n    const firstIndex = 0, firstSegment = path.segments[firstIndex], firstValue = firstSegment.values[firstIndex];\n    ctx.moveTo(firstValue.x * radius, firstValue.y * radius);\n    for (const segment of path.segments) {\n        const value = segment.values[firstIndex], index2 = 1, index3 = 2, index4 = 3;\n        switch (segment.type) {\n            case SegmentType.line:\n                ctx.lineTo(value.x * radius, value.y * radius);\n                break;\n            case SegmentType.bezier:\n                ctx.bezierCurveTo(segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x * radius, segment.values[index3].y * radius, segment.values[index4].x * radius, segment.values[index4].y * radius);\n                break;\n            case SegmentType.quadratic:\n                ctx.quadraticCurveTo(segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x * radius, segment.values[index3].y * radius);\n                break;\n            case SegmentType.arc:\n                ctx.arc(value.x * radius, value.y * radius, segment.values[index2].x * radius, segment.values[index3].x, segment.values[index3].y);\n                break;\n            case SegmentType.ellipse:\n                ctx.ellipse(value.x * radius, value.y * radius, segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x, segment.values[index4].x, segment.values[index4].y);\n        }\n    }\n    if (!path.half) {\n        return;\n    }\n    const lengthOffset = 1, minLength = 0;\n    for (let i = path.segments.length - lengthOffset; i >= minLength; i--) {\n        const segment = path.segments[i], value = segment.values[firstIndex], index2 = 1, index3 = 2;\n        switch (segment.type) {\n            case SegmentType.line:\n                ctx.lineTo(value.x * -radius, value.y * radius);\n                break;\n            case SegmentType.bezier:\n                ctx.bezierCurveTo(-segment.values[index3].x * radius, segment.values[index3].y * radius, -segment.values[index2].x * radius, segment.values[index2].y * radius, value.x * radius, value.y * radius);\n                break;\n            case SegmentType.quadratic:\n                ctx.quadraticCurveTo(-segment.values[index2].x * radius, segment.values[index2].y * radius, -segment.values[index3].x * radius, segment.values[index3].y * radius);\n                break;\n            case SegmentType.arc:\n            case SegmentType.ellipse:\n            default:\n                break;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}