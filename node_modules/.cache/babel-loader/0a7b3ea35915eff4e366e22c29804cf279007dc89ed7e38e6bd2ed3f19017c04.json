{"ast":null,"code":"import { getRangeValue } from \"@tsparticles/engine\";\nimport { drawRoundedRect } from \"./Utils.js\";\nconst fixFactorSquare = 2,\n  fixFactor = Math.sqrt(fixFactorSquare),\n  double = 2,\n  defaultRadius = 5;\nexport class RoundedRectDrawer {\n  constructor() {\n    this.validTypes = [\"rounded-rect\"];\n  }\n  draw(data) {\n    const {\n        context,\n        particle,\n        radius\n      } = data,\n      fixedRadius = radius / fixFactor,\n      fixedDiameter = fixedRadius * double,\n      borderRadius = particle.borderRadius ?? defaultRadius;\n    if (\"roundRect\" in context) {\n      context.roundRect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter, borderRadius);\n    } else {\n      drawRoundedRect(context, fixedRadius, fixedDiameter, borderRadius);\n    }\n  }\n  particleInit(container, particle) {\n    const shapeData = particle.shapeData;\n    particle.borderRadius = getRangeValue(shapeData?.radius ?? defaultRadius) * container.retina.pixelRatio;\n  }\n}","map":{"version":3,"names":["getRangeValue","drawRoundedRect","fixFactorSquare","fixFactor","Math","sqrt","double","defaultRadius","RoundedRectDrawer","constructor","validTypes","draw","data","context","particle","radius","fixedRadius","fixedDiameter","borderRadius","roundRect","particleInit","container","shapeData","retina","pixelRatio"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/shape-rounded-rect/browser/RoundedRectDrawer.js"],"sourcesContent":["import { getRangeValue } from \"@tsparticles/engine\";\nimport { drawRoundedRect } from \"./Utils.js\";\nconst fixFactorSquare = 2, fixFactor = Math.sqrt(fixFactorSquare), double = 2, defaultRadius = 5;\nexport class RoundedRectDrawer {\n    constructor() {\n        this.validTypes = [\"rounded-rect\"];\n    }\n    draw(data) {\n        const { context, particle, radius } = data, fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * double, borderRadius = particle.borderRadius ?? defaultRadius;\n        if (\"roundRect\" in context) {\n            context.roundRect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter, borderRadius);\n        }\n        else {\n            drawRoundedRect(context, fixedRadius, fixedDiameter, borderRadius);\n        }\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData;\n        particle.borderRadius = getRangeValue(shapeData?.radius ?? defaultRadius) * container.retina.pixelRatio;\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SAASC,eAAe,QAAQ,YAAY;AAC5C,MAAMC,eAAe,GAAG,CAAC;EAAEC,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACH,eAAe,CAAC;EAAEI,MAAM,GAAG,CAAC;EAAEC,aAAa,GAAG,CAAC;AAChG,OAAO,MAAMC,iBAAiB,CAAC;EAC3BC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,UAAU,GAAG,CAAC,cAAc,CAAC;EACtC;EACAC,IAAIA,CAACC,IAAI,EAAE;IACP,MAAM;QAAEC,OAAO;QAAEC,QAAQ;QAAEC;MAAO,CAAC,GAAGH,IAAI;MAAEI,WAAW,GAAGD,MAAM,GAAGZ,SAAS;MAAEc,aAAa,GAAGD,WAAW,GAAGV,MAAM;MAAEY,YAAY,GAAGJ,QAAQ,CAACI,YAAY,IAAIX,aAAa;IACzK,IAAI,WAAW,IAAIM,OAAO,EAAE;MACxBA,OAAO,CAACM,SAAS,CAAC,CAACH,WAAW,EAAE,CAACA,WAAW,EAAEC,aAAa,EAAEA,aAAa,EAAEC,YAAY,CAAC;IAC7F,CAAC,MACI;MACDjB,eAAe,CAACY,OAAO,EAAEG,WAAW,EAAEC,aAAa,EAAEC,YAAY,CAAC;IACtE;EACJ;EACAE,YAAYA,CAACC,SAAS,EAAEP,QAAQ,EAAE;IAC9B,MAAMQ,SAAS,GAAGR,QAAQ,CAACQ,SAAS;IACpCR,QAAQ,CAACI,YAAY,GAAGlB,aAAa,CAACsB,SAAS,EAAEP,MAAM,IAAIR,aAAa,CAAC,GAAGc,SAAS,CAACE,MAAM,CAACC,UAAU;EAC3G;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}