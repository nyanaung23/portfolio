{"ast":null,"code":"import { getRangeValue, getStyleFromHsl, parseAlpha, percentDenominator } from \"@tsparticles/engine\";\nconst rgbFactor = 255,\n  double = 2,\n  half = 0.5;\nexport function rgbToHsv(rgb) {\n  const rgbPercent = {\n      r: rgb.r / rgbFactor,\n      g: rgb.g / rgbFactor,\n      b: rgb.b / rgbFactor\n    },\n    xMax = Math.max(rgbPercent.r, rgbPercent.g, rgbPercent.b),\n    xMin = Math.min(rgbPercent.r, rgbPercent.g, rgbPercent.b),\n    v = xMax,\n    c = xMax - xMin;\n  let h = 0;\n  const phaseOffset = {\n      r: 0,\n      g: 2,\n      b: 4\n    },\n    phaseValue = 60;\n  if (v === rgbPercent.r) {\n    h = phaseValue * (phaseOffset.r + (rgbPercent.g - rgbPercent.b) / c);\n  } else if (v === rgbPercent.g) {\n    h = phaseValue * (phaseOffset.g + (rgbPercent.b - rgbPercent.r) / c);\n  } else if (v === rgbPercent.b) {\n    h = phaseValue * (phaseOffset.b + (rgbPercent.r - rgbPercent.g) / c);\n  }\n  const defaultSaturation = 0,\n    s = !v ? defaultSaturation : c / v;\n  return {\n    h,\n    s: s * percentDenominator,\n    v: v * percentDenominator\n  };\n}\nexport function rgbaToHsva(rgba) {\n  return {\n    a: rgba.a,\n    ...rgbToHsv(rgba)\n  };\n}\nexport function getStyleFromHsv(color, opacity) {\n  return getStyleFromHsl(hsvToHsl(color), opacity);\n}\nexport function hslToHsv(hsl) {\n  const l = hsl.l / percentDenominator,\n    sl = hsl.s / percentDenominator,\n    offset = 1,\n    noValue = 0,\n    v = l + sl * Math.min(l, offset - l),\n    sv = !v ? noValue : double * (offset - l / v);\n  return {\n    h: hsl.h,\n    s: sv * percentDenominator,\n    v: v * percentDenominator\n  };\n}\nexport function hslaToHsva(hsla) {\n  return {\n    a: hsla.a,\n    ...hslToHsv(hsla)\n  };\n}\nexport function hsvToHsl(hsv) {\n  const v = hsv.v / percentDenominator,\n    sv = hsv.s / percentDenominator,\n    offset = 1,\n    noValue = 0,\n    l = v * (offset - sv * half),\n    sl = !l || l === offset ? noValue : (v - l) / Math.min(l, offset - l);\n  return {\n    h: hsv.h,\n    l: l * percentDenominator,\n    s: sl * percentDenominator\n  };\n}\nexport function hsvaToHsla(hsva) {\n  return {\n    a: hsva.a,\n    ...hsvToHsl(hsva)\n  };\n}\nexport function hsvToRgb(hsv) {\n  const result = {\n      b: 0,\n      g: 0,\n      r: 0\n    },\n    phase = 60,\n    hsvPercent = {\n      h: hsv.h / phase,\n      s: hsv.s / percentDenominator,\n      v: hsv.v / percentDenominator\n    },\n    offset = 1,\n    hPercentFactor = 2,\n    c = hsvPercent.v * hsvPercent.s,\n    x = c * (offset - Math.abs(hsvPercent.h % hPercentFactor - offset));\n  let tempRgb;\n  const cxzRange = {\n      min: 0,\n      max: 1\n    },\n    xczRange = {\n      min: 1,\n      max: 2\n    },\n    zcxRange = {\n      min: 2,\n      max: 3\n    },\n    zxcRange = {\n      min: 3,\n      max: 4\n    },\n    xzcRange = {\n      min: 4,\n      max: 5\n    },\n    czxRange = {\n      min: 5,\n      max: 6\n    };\n  if (hsvPercent.h >= cxzRange.min && hsvPercent.h <= cxzRange.max) {\n    tempRgb = {\n      r: c,\n      g: x,\n      b: 0\n    };\n  } else if (hsvPercent.h > xczRange.min && hsvPercent.h <= xczRange.max) {\n    tempRgb = {\n      r: x,\n      g: c,\n      b: 0\n    };\n  } else if (hsvPercent.h > zcxRange.min && hsvPercent.h <= zcxRange.max) {\n    tempRgb = {\n      r: 0,\n      g: c,\n      b: x\n    };\n  } else if (hsvPercent.h > zxcRange.min && hsvPercent.h <= zxcRange.max) {\n    tempRgb = {\n      r: 0,\n      g: x,\n      b: c\n    };\n  } else if (hsvPercent.h > xzcRange.min && hsvPercent.h <= xzcRange.max) {\n    tempRgb = {\n      r: x,\n      g: 0,\n      b: c\n    };\n  } else if (hsvPercent.h > czxRange.min && hsvPercent.h <= czxRange.max) {\n    tempRgb = {\n      r: c,\n      g: 0,\n      b: x\n    };\n  }\n  if (tempRgb) {\n    const m = hsvPercent.v - c;\n    result.r = Math.floor((tempRgb.r + m) * rgbFactor);\n    result.g = Math.floor((tempRgb.g + m) * rgbFactor);\n    result.b = Math.floor((tempRgb.b + m) * rgbFactor);\n  }\n  return result;\n}\nexport function hsvaToRgba(hsva) {\n  return {\n    a: hsva.a,\n    ...hsvToRgb(hsva)\n  };\n}\nexport class HsvColorManager {\n  constructor() {\n    this.key = \"hsv\";\n    this.stringPrefix = \"hsv\";\n  }\n  handleColor(color) {\n    const colorValue = color.value,\n      hsvColor = colorValue.hsv ?? color.value;\n    if (hsvColor.h !== undefined && hsvColor.v !== undefined) {\n      return hsvToRgb(hsvColor);\n    }\n  }\n  handleRangeColor(color) {\n    const colorValue = color.value,\n      hsvColor = colorValue.hsv ?? color.value;\n    if (hsvColor.h !== undefined && hsvColor.v !== undefined) {\n      return hsvToRgb({\n        h: getRangeValue(hsvColor.h),\n        s: getRangeValue(hsvColor.s),\n        v: getRangeValue(hsvColor.v)\n      });\n    }\n  }\n  parseString(input) {\n    if (!input.startsWith(\"hsv\")) {\n      return;\n    }\n    const regex = /hsva?\\(\\s*(\\d+)Â°\\s*[\\s,]\\s*(\\d+)%\\s*[\\s,]\\s*(\\d+)%\\s*([\\s,]\\s*(0|1|0?\\.\\d+|(\\d{1,3})%)\\s*)?\\)/i,\n      result = regex.exec(input),\n      fullLength = 4,\n      indexes = {\n        h: 1,\n        s: 2,\n        v: 3,\n        a: 5\n      },\n      defaultAlpha = 1,\n      radix = 10;\n    return result ? hsvaToRgba({\n      a: result.length > fullLength ? parseAlpha(result[indexes.a]) : defaultAlpha,\n      h: parseInt(result[indexes.h], radix),\n      s: parseInt(result[indexes.s], radix),\n      v: parseInt(result[indexes.v], radix)\n    }) : undefined;\n  }\n}","map":{"version":3,"names":["getRangeValue","getStyleFromHsl","parseAlpha","percentDenominator","rgbFactor","double","half","rgbToHsv","rgb","rgbPercent","r","g","b","xMax","Math","max","xMin","min","v","c","h","phaseOffset","phaseValue","defaultSaturation","s","rgbaToHsva","rgba","a","getStyleFromHsv","color","opacity","hsvToHsl","hslToHsv","hsl","l","sl","offset","noValue","sv","hslaToHsva","hsla","hsv","hsvaToHsla","hsva","hsvToRgb","result","phase","hsvPercent","hPercentFactor","x","abs","tempRgb","cxzRange","xczRange","zcxRange","zxcRange","xzcRange","czxRange","m","floor","hsvaToRgba","HsvColorManager","constructor","key","stringPrefix","handleColor","colorValue","value","hsvColor","undefined","handleRangeColor","parseString","input","startsWith","regex","exec","fullLength","indexes","defaultAlpha","radix","length","parseInt"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/plugin-hsv-color/browser/HsvColorManager.js"],"sourcesContent":["import { getRangeValue, getStyleFromHsl, parseAlpha, percentDenominator, } from \"@tsparticles/engine\";\nconst rgbFactor = 255, double = 2, half = 0.5;\nexport function rgbToHsv(rgb) {\n    const rgbPercent = {\n        r: rgb.r / rgbFactor,\n        g: rgb.g / rgbFactor,\n        b: rgb.b / rgbFactor,\n    }, xMax = Math.max(rgbPercent.r, rgbPercent.g, rgbPercent.b), xMin = Math.min(rgbPercent.r, rgbPercent.g, rgbPercent.b), v = xMax, c = xMax - xMin;\n    let h = 0;\n    const phaseOffset = {\n        r: 0,\n        g: 2,\n        b: 4,\n    }, phaseValue = 60;\n    if (v === rgbPercent.r) {\n        h = phaseValue * (phaseOffset.r + (rgbPercent.g - rgbPercent.b) / c);\n    }\n    else if (v === rgbPercent.g) {\n        h = phaseValue * (phaseOffset.g + (rgbPercent.b - rgbPercent.r) / c);\n    }\n    else if (v === rgbPercent.b) {\n        h = phaseValue * (phaseOffset.b + (rgbPercent.r - rgbPercent.g) / c);\n    }\n    const defaultSaturation = 0, s = !v ? defaultSaturation : c / v;\n    return {\n        h,\n        s: s * percentDenominator,\n        v: v * percentDenominator,\n    };\n}\nexport function rgbaToHsva(rgba) {\n    return {\n        a: rgba.a,\n        ...rgbToHsv(rgba),\n    };\n}\nexport function getStyleFromHsv(color, opacity) {\n    return getStyleFromHsl(hsvToHsl(color), opacity);\n}\nexport function hslToHsv(hsl) {\n    const l = hsl.l / percentDenominator, sl = hsl.s / percentDenominator, offset = 1, noValue = 0, v = l + sl * Math.min(l, offset - l), sv = !v ? noValue : double * (offset - l / v);\n    return {\n        h: hsl.h,\n        s: sv * percentDenominator,\n        v: v * percentDenominator,\n    };\n}\nexport function hslaToHsva(hsla) {\n    return {\n        a: hsla.a,\n        ...hslToHsv(hsla),\n    };\n}\nexport function hsvToHsl(hsv) {\n    const v = hsv.v / percentDenominator, sv = hsv.s / percentDenominator, offset = 1, noValue = 0, l = v * (offset - sv * half), sl = !l || l === offset ? noValue : (v - l) / Math.min(l, offset - l);\n    return {\n        h: hsv.h,\n        l: l * percentDenominator,\n        s: sl * percentDenominator,\n    };\n}\nexport function hsvaToHsla(hsva) {\n    return {\n        a: hsva.a,\n        ...hsvToHsl(hsva),\n    };\n}\nexport function hsvToRgb(hsv) {\n    const result = { b: 0, g: 0, r: 0 }, phase = 60, hsvPercent = {\n        h: hsv.h / phase,\n        s: hsv.s / percentDenominator,\n        v: hsv.v / percentDenominator,\n    }, offset = 1, hPercentFactor = 2, c = hsvPercent.v * hsvPercent.s, x = c * (offset - Math.abs((hsvPercent.h % hPercentFactor) - offset));\n    let tempRgb;\n    const cxzRange = { min: 0, max: 1 }, xczRange = { min: 1, max: 2 }, zcxRange = { min: 2, max: 3 }, zxcRange = { min: 3, max: 4 }, xzcRange = { min: 4, max: 5 }, czxRange = { min: 5, max: 6 };\n    if (hsvPercent.h >= cxzRange.min && hsvPercent.h <= cxzRange.max) {\n        tempRgb = {\n            r: c,\n            g: x,\n            b: 0,\n        };\n    }\n    else if (hsvPercent.h > xczRange.min && hsvPercent.h <= xczRange.max) {\n        tempRgb = {\n            r: x,\n            g: c,\n            b: 0,\n        };\n    }\n    else if (hsvPercent.h > zcxRange.min && hsvPercent.h <= zcxRange.max) {\n        tempRgb = {\n            r: 0,\n            g: c,\n            b: x,\n        };\n    }\n    else if (hsvPercent.h > zxcRange.min && hsvPercent.h <= zxcRange.max) {\n        tempRgb = {\n            r: 0,\n            g: x,\n            b: c,\n        };\n    }\n    else if (hsvPercent.h > xzcRange.min && hsvPercent.h <= xzcRange.max) {\n        tempRgb = {\n            r: x,\n            g: 0,\n            b: c,\n        };\n    }\n    else if (hsvPercent.h > czxRange.min && hsvPercent.h <= czxRange.max) {\n        tempRgb = {\n            r: c,\n            g: 0,\n            b: x,\n        };\n    }\n    if (tempRgb) {\n        const m = hsvPercent.v - c;\n        result.r = Math.floor((tempRgb.r + m) * rgbFactor);\n        result.g = Math.floor((tempRgb.g + m) * rgbFactor);\n        result.b = Math.floor((tempRgb.b + m) * rgbFactor);\n    }\n    return result;\n}\nexport function hsvaToRgba(hsva) {\n    return {\n        a: hsva.a,\n        ...hsvToRgb(hsva),\n    };\n}\nexport class HsvColorManager {\n    constructor() {\n        this.key = \"hsv\";\n        this.stringPrefix = \"hsv\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, hsvColor = colorValue.hsv ?? color.value;\n        if (hsvColor.h !== undefined && hsvColor.v !== undefined) {\n            return hsvToRgb(hsvColor);\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, hsvColor = colorValue.hsv ?? color.value;\n        if (hsvColor.h !== undefined && hsvColor.v !== undefined) {\n            return hsvToRgb({\n                h: getRangeValue(hsvColor.h),\n                s: getRangeValue(hsvColor.s),\n                v: getRangeValue(hsvColor.v),\n            });\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(\"hsv\")) {\n            return;\n        }\n        const regex = /hsva?\\(\\s*(\\d+)Â°\\s*[\\s,]\\s*(\\d+)%\\s*[\\s,]\\s*(\\d+)%\\s*([\\s,]\\s*(0|1|0?\\.\\d+|(\\d{1,3})%)\\s*)?\\)/i, result = regex.exec(input), fullLength = 4, indexes = {\n            h: 1,\n            s: 2,\n            v: 3,\n            a: 5,\n        }, defaultAlpha = 1, radix = 10;\n        return result\n            ? hsvaToRgba({\n                a: result.length > fullLength ? parseAlpha(result[indexes.a]) : defaultAlpha,\n                h: parseInt(result[indexes.h], radix),\n                s: parseInt(result[indexes.s], radix),\n                v: parseInt(result[indexes.v], radix),\n            })\n            : undefined;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}