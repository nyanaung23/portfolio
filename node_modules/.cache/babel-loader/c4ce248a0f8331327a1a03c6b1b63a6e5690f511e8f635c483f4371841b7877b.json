{"ast":null,"code":"import { getRandom } from \"@tsparticles/engine\";\nconst maxAttempts = 100,\n  half = 0.5;\nexport function generateRandomPointWithinPath(ctx, path, center, size) {\n  let randomPoint = null;\n  for (let attempts = 0; attempts < maxAttempts; attempts++) {\n    const tmpPoint = {\n      x: center.x + getRandom() * size.width - size.width * half,\n      y: center.y + getRandom() * size.height - size.height * half\n    };\n    if (ctx.isPointInPath(path, tmpPoint.x, tmpPoint.y)) {\n      randomPoint = tmpPoint;\n      break;\n    }\n  }\n  return randomPoint;\n}\nexport function generateRandomPointOnPathPerimeter(ctx, path, center, size) {\n  let randomPoint = null;\n  for (let attempts = 0; attempts < maxAttempts; attempts++) {\n    const tmpPoint = {\n      x: center.x + getRandom() * size.width - size.width * half,\n      y: center.y + getRandom() * size.height - size.height * half\n    };\n    if (ctx.isPointInStroke(path, tmpPoint.x, tmpPoint.y)) {\n      randomPoint = tmpPoint;\n      break;\n    }\n  }\n  return randomPoint;\n}","map":{"version":3,"names":["getRandom","maxAttempts","half","generateRandomPointWithinPath","ctx","path","center","size","randomPoint","attempts","tmpPoint","x","width","y","height","isPointInPath","generateRandomPointOnPathPerimeter","isPointInStroke"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/plugin-emitters-shape-path/browser/utils.js"],"sourcesContent":["import { getRandom } from \"@tsparticles/engine\";\nconst maxAttempts = 100, half = 0.5;\nexport function generateRandomPointWithinPath(ctx, path, center, size) {\n    let randomPoint = null;\n    for (let attempts = 0; attempts < maxAttempts; attempts++) {\n        const tmpPoint = {\n            x: center.x + getRandom() * size.width - size.width * half,\n            y: center.y + getRandom() * size.height - size.height * half,\n        };\n        if (ctx.isPointInPath(path, tmpPoint.x, tmpPoint.y)) {\n            randomPoint = tmpPoint;\n            break;\n        }\n    }\n    return randomPoint;\n}\nexport function generateRandomPointOnPathPerimeter(ctx, path, center, size) {\n    let randomPoint = null;\n    for (let attempts = 0; attempts < maxAttempts; attempts++) {\n        const tmpPoint = {\n            x: center.x + getRandom() * size.width - size.width * half,\n            y: center.y + getRandom() * size.height - size.height * half,\n        };\n        if (ctx.isPointInStroke(path, tmpPoint.x, tmpPoint.y)) {\n            randomPoint = tmpPoint;\n            break;\n        }\n    }\n    return randomPoint;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,MAAMC,WAAW,GAAG,GAAG;EAAEC,IAAI,GAAG,GAAG;AACnC,OAAO,SAASC,6BAA6BA,CAACC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAE;EACnE,IAAIC,WAAW,GAAG,IAAI;EACtB,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGR,WAAW,EAAEQ,QAAQ,EAAE,EAAE;IACvD,MAAMC,QAAQ,GAAG;MACbC,CAAC,EAAEL,MAAM,CAACK,CAAC,GAAGX,SAAS,CAAC,CAAC,GAAGO,IAAI,CAACK,KAAK,GAAGL,IAAI,CAACK,KAAK,GAAGV,IAAI;MAC1DW,CAAC,EAAEP,MAAM,CAACO,CAAC,GAAGb,SAAS,CAAC,CAAC,GAAGO,IAAI,CAACO,MAAM,GAAGP,IAAI,CAACO,MAAM,GAAGZ;IAC5D,CAAC;IACD,IAAIE,GAAG,CAACW,aAAa,CAACV,IAAI,EAAEK,QAAQ,CAACC,CAAC,EAAED,QAAQ,CAACG,CAAC,CAAC,EAAE;MACjDL,WAAW,GAAGE,QAAQ;MACtB;IACJ;EACJ;EACA,OAAOF,WAAW;AACtB;AACA,OAAO,SAASQ,kCAAkCA,CAACZ,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAE;EACxE,IAAIC,WAAW,GAAG,IAAI;EACtB,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGR,WAAW,EAAEQ,QAAQ,EAAE,EAAE;IACvD,MAAMC,QAAQ,GAAG;MACbC,CAAC,EAAEL,MAAM,CAACK,CAAC,GAAGX,SAAS,CAAC,CAAC,GAAGO,IAAI,CAACK,KAAK,GAAGL,IAAI,CAACK,KAAK,GAAGV,IAAI;MAC1DW,CAAC,EAAEP,MAAM,CAACO,CAAC,GAAGb,SAAS,CAAC,CAAC,GAAGO,IAAI,CAACO,MAAM,GAAGP,IAAI,CAACO,MAAM,GAAGZ;IAC5D,CAAC;IACD,IAAIE,GAAG,CAACa,eAAe,CAACZ,IAAI,EAAEK,QAAQ,CAACC,CAAC,EAAED,QAAQ,CAACG,CAAC,CAAC,EAAE;MACnDL,WAAW,GAAGE,QAAQ;MACtB;IACJ;EACJ;EACA,OAAOF,WAAW;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}