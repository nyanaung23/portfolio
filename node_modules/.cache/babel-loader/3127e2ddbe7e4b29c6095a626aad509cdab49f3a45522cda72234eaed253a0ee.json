{"ast":null,"code":"import { getRangeValue, rangeColorToHsl } from \"@tsparticles/engine\";\nimport { Orbit } from \"./Options/Classes/Orbit.js\";\nimport { OrbitType } from \"./Enums.js\";\nimport { drawEllipse } from \"./Utils.js\";\nconst double = 2,\n  half = 0.5,\n  doublePI = Math.PI * double,\n  defaultOrbitSpeed = 0,\n  halfPI = Math.PI * half,\n  piAndAHalf = Math.PI + halfPI,\n  startAngle = 0,\n  defaultOpacity = 1,\n  defaultWidth = 1,\n  defaultRotation = 0;\nexport class OrbitUpdater {\n  constructor(container, engine) {\n    this._engine = engine;\n    this._container = container;\n  }\n  afterDraw(particle) {\n    const orbitOptions = particle.options.orbit;\n    if (orbitOptions?.enable) {\n      this.drawOrbit(particle, OrbitType.front);\n    }\n  }\n  beforeDraw(particle) {\n    const orbitOptions = particle.options.orbit;\n    if (orbitOptions?.enable) {\n      this.drawOrbit(particle, OrbitType.back);\n    }\n  }\n  drawOrbit(particle, type) {\n    const container = this._container;\n    let start, end;\n    switch (type) {\n      case OrbitType.back:\n        start = halfPI;\n        end = piAndAHalf;\n        break;\n      case OrbitType.front:\n        start = piAndAHalf;\n        end = halfPI;\n        break;\n      default:\n        start = startAngle;\n        end = doublePI;\n    }\n    container.canvas.draw(ctx => {\n      drawEllipse(ctx, particle, particle.orbitColor ?? particle.getFillColor(), particle.retina.orbitRadius ?? container.retina.orbitRadius ?? particle.getRadius(), particle.orbitOpacity ?? defaultOpacity, particle.orbitWidth ?? defaultWidth, (particle.orbitRotation ?? defaultRotation) * container.retina.pixelRatio, start, end);\n    });\n  }\n  init(particle) {\n    const container = this._container,\n      particlesOptions = particle.options,\n      orbitOptions = particlesOptions.orbit;\n    if (!orbitOptions?.enable) {\n      return;\n    }\n    particle.orbitRotation = getRangeValue(orbitOptions.rotation.value);\n    particle.orbitColor = rangeColorToHsl(this._engine, orbitOptions.color);\n    particle.retina.orbitRadius = orbitOptions.radius !== undefined ? getRangeValue(orbitOptions.radius) * container.retina.pixelRatio : undefined;\n    container.retina.orbitRadius = particle.retina.orbitRadius;\n    particle.orbitAnimationSpeed = orbitOptions.animation.enable ? getRangeValue(orbitOptions.animation.speed) : defaultOrbitSpeed;\n    particle.orbitWidth = getRangeValue(orbitOptions.width);\n    particle.orbitOpacity = getRangeValue(orbitOptions.opacity);\n  }\n  isEnabled(particle) {\n    const orbitAnimations = particle.options.orbit?.animation;\n    return !particle.destroyed && !particle.spawning && !!orbitAnimations?.enable;\n  }\n  loadOptions(options, ...sources) {\n    if (!options.orbit) {\n      options.orbit = new Orbit();\n    }\n    for (const source of sources) {\n      options.orbit.load(source?.orbit);\n    }\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    if (particle.orbitRotation === undefined) {\n      particle.orbitRotation = defaultRotation;\n    }\n    particle.orbitRotation += (particle.orbitAnimationSpeed ?? defaultOrbitSpeed / doublePI) * delta.factor;\n  }\n}","map":{"version":3,"names":["getRangeValue","rangeColorToHsl","Orbit","OrbitType","drawEllipse","double","half","doublePI","Math","PI","defaultOrbitSpeed","halfPI","piAndAHalf","startAngle","defaultOpacity","defaultWidth","defaultRotation","OrbitUpdater","constructor","container","engine","_engine","_container","afterDraw","particle","orbitOptions","options","orbit","enable","drawOrbit","front","beforeDraw","back","type","start","end","canvas","draw","ctx","orbitColor","getFillColor","retina","orbitRadius","getRadius","orbitOpacity","orbitWidth","orbitRotation","pixelRatio","init","particlesOptions","rotation","value","color","radius","undefined","orbitAnimationSpeed","animation","speed","width","opacity","isEnabled","orbitAnimations","destroyed","spawning","loadOptions","sources","source","load","update","delta","factor"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/updater-orbit/browser/OrbitUpdater.js"],"sourcesContent":["import { getRangeValue, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Orbit } from \"./Options/Classes/Orbit.js\";\nimport { OrbitType } from \"./Enums.js\";\nimport { drawEllipse } from \"./Utils.js\";\nconst double = 2, half = 0.5, doublePI = Math.PI * double, defaultOrbitSpeed = 0, halfPI = Math.PI * half, piAndAHalf = Math.PI + halfPI, startAngle = 0, defaultOpacity = 1, defaultWidth = 1, defaultRotation = 0;\nexport class OrbitUpdater {\n    constructor(container, engine) {\n        this._engine = engine;\n        this._container = container;\n    }\n    afterDraw(particle) {\n        const orbitOptions = particle.options.orbit;\n        if (orbitOptions?.enable) {\n            this.drawOrbit(particle, OrbitType.front);\n        }\n    }\n    beforeDraw(particle) {\n        const orbitOptions = particle.options.orbit;\n        if (orbitOptions?.enable) {\n            this.drawOrbit(particle, OrbitType.back);\n        }\n    }\n    drawOrbit(particle, type) {\n        const container = this._container;\n        let start, end;\n        switch (type) {\n            case OrbitType.back:\n                start = halfPI;\n                end = piAndAHalf;\n                break;\n            case OrbitType.front:\n                start = piAndAHalf;\n                end = halfPI;\n                break;\n            default:\n                start = startAngle;\n                end = doublePI;\n        }\n        container.canvas.draw(ctx => {\n            drawEllipse(ctx, particle, particle.orbitColor ?? particle.getFillColor(), particle.retina.orbitRadius ?? container.retina.orbitRadius ?? particle.getRadius(), particle.orbitOpacity ?? defaultOpacity, particle.orbitWidth ?? defaultWidth, (particle.orbitRotation ?? defaultRotation) * container.retina.pixelRatio, start, end);\n        });\n    }\n    init(particle) {\n        const container = this._container, particlesOptions = particle.options, orbitOptions = particlesOptions.orbit;\n        if (!orbitOptions?.enable) {\n            return;\n        }\n        particle.orbitRotation = getRangeValue(orbitOptions.rotation.value);\n        particle.orbitColor = rangeColorToHsl(this._engine, orbitOptions.color);\n        particle.retina.orbitRadius =\n            orbitOptions.radius !== undefined\n                ? getRangeValue(orbitOptions.radius) * container.retina.pixelRatio\n                : undefined;\n        container.retina.orbitRadius = particle.retina.orbitRadius;\n        particle.orbitAnimationSpeed = orbitOptions.animation.enable\n            ? getRangeValue(orbitOptions.animation.speed)\n            : defaultOrbitSpeed;\n        particle.orbitWidth = getRangeValue(orbitOptions.width);\n        particle.orbitOpacity = getRangeValue(orbitOptions.opacity);\n    }\n    isEnabled(particle) {\n        const orbitAnimations = particle.options.orbit?.animation;\n        return !particle.destroyed && !particle.spawning && !!orbitAnimations?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.orbit) {\n            options.orbit = new Orbit();\n        }\n        for (const source of sources) {\n            options.orbit.load(source?.orbit);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        if (particle.orbitRotation === undefined) {\n            particle.orbitRotation = defaultRotation;\n        }\n        particle.orbitRotation += (particle.orbitAnimationSpeed ?? defaultOrbitSpeed / doublePI) * delta.factor;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}