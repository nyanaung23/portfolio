{"ast":null,"code":"import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, isFunction, isNull, isString } from \"@tsparticles/engine\";\nimport { getCanvasImageData, getImageData, getTextData } from \"./utils.js\";\nconst maxRetries = 100,\n  half = 0.5;\nexport class EmittersCanvasShape extends EmitterShapeBase {\n  constructor(position, size, fill, options) {\n    super(position, size, fill, options);\n    const filter = options.filter,\n      minAlpha = 0;\n    let filterFunc = pixel => pixel.a > minAlpha;\n    if (filter !== undefined) {\n      if (isString(filter)) {\n        if (Object.hasOwn(window, filter)) {\n          const wndFilter = window[filter];\n          if (isFunction(wndFilter)) {\n            filterFunc = wndFilter;\n          }\n        }\n      } else {\n        filterFunc = filter;\n      }\n    }\n    this.filter = filterFunc;\n    this.scale = options.scale;\n    this.pixelData = {\n      pixels: [],\n      height: 0,\n      width: 0\n    };\n  }\n  async init() {\n    let pixelData;\n    const options = this.options,\n      selector = options.selector,\n      pixels = options.pixels,\n      image = options.image,\n      element = options.element,\n      text = options.text,\n      offset = pixels.offset;\n    if (image) {\n      const url = image.src;\n      if (!url) {\n        return;\n      }\n      pixelData = await getImageData(url, offset);\n    } else if (text) {\n      const data = getTextData(text, offset, this.fill);\n      if (isNull(data)) {\n        return;\n      }\n      pixelData = data;\n    } else if (element ?? selector) {\n      const canvas = element ?? (selector && document.querySelector(selector));\n      if (!canvas) {\n        return;\n      }\n      const context = canvas.getContext(\"2d\");\n      if (!context) {\n        return;\n      }\n      pixelData = getCanvasImageData(context, canvas, offset);\n    }\n    if (!pixelData) {\n      return;\n    }\n    this.pixelData = pixelData;\n  }\n  randomPosition() {\n    const {\n        height,\n        width\n      } = this.pixelData,\n      data = this.pixelData,\n      position = this.position,\n      scale = this.scale,\n      positionOffset = {\n        x: position.x - width * scale * half,\n        y: position.y - height * scale * half\n      };\n    for (let i = 0; i < maxRetries; i++) {\n      const nextIndex = Math.floor(getRandom() * width * height),\n        pixelPos = {\n          x: nextIndex % width,\n          y: Math.floor(nextIndex / width)\n        },\n        pixel = data.pixels[pixelPos.y][pixelPos.x],\n        shouldCreateParticle = this.filter(pixel);\n      if (!shouldCreateParticle) {\n        continue;\n      }\n      return {\n        position: {\n          x: pixelPos.x * scale + positionOffset.x,\n          y: pixelPos.y * scale + positionOffset.y\n        },\n        color: {\n          ...pixel\n        },\n        opacity: pixel.a\n      };\n    }\n    return null;\n  }\n  resize(position, size) {\n    super.resize(position, size);\n  }\n}","map":{"version":3,"names":["EmitterShapeBase","getRandom","isFunction","isNull","isString","getCanvasImageData","getImageData","getTextData","maxRetries","half","EmittersCanvasShape","constructor","position","size","fill","options","filter","minAlpha","filterFunc","pixel","a","undefined","Object","hasOwn","window","wndFilter","scale","pixelData","pixels","height","width","init","selector","image","element","text","offset","url","src","data","canvas","document","querySelector","context","getContext","randomPosition","positionOffset","x","y","i","nextIndex","Math","floor","pixelPos","shouldCreateParticle","color","opacity","resize"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/EmittersCanvasShape.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, isFunction, isNull, isString, } from \"@tsparticles/engine\";\nimport { getCanvasImageData, getImageData, getTextData } from \"./utils.js\";\nconst maxRetries = 100, half = 0.5;\nexport class EmittersCanvasShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n        const filter = options.filter, minAlpha = 0;\n        let filterFunc = (pixel) => pixel.a > minAlpha;\n        if (filter !== undefined) {\n            if (isString(filter)) {\n                if (Object.hasOwn(window, filter)) {\n                    const wndFilter = window[filter];\n                    if (isFunction(wndFilter)) {\n                        filterFunc = wndFilter;\n                    }\n                }\n            }\n            else {\n                filterFunc = filter;\n            }\n        }\n        this.filter = filterFunc;\n        this.scale = options.scale;\n        this.pixelData = {\n            pixels: [],\n            height: 0,\n            width: 0,\n        };\n    }\n    async init() {\n        let pixelData;\n        const options = this.options, selector = options.selector, pixels = options.pixels, image = options.image, element = options.element, text = options.text, offset = pixels.offset;\n        if (image) {\n            const url = image.src;\n            if (!url) {\n                return;\n            }\n            pixelData = await getImageData(url, offset);\n        }\n        else if (text) {\n            const data = getTextData(text, offset, this.fill);\n            if (isNull(data)) {\n                return;\n            }\n            pixelData = data;\n        }\n        else if (element ?? selector) {\n            const canvas = element ?? (selector && document.querySelector(selector));\n            if (!canvas) {\n                return;\n            }\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            pixelData = getCanvasImageData(context, canvas, offset);\n        }\n        if (!pixelData) {\n            return;\n        }\n        this.pixelData = pixelData;\n    }\n    randomPosition() {\n        const { height, width } = this.pixelData, data = this.pixelData, position = this.position, scale = this.scale, positionOffset = {\n            x: position.x - width * scale * half,\n            y: position.y - height * scale * half,\n        };\n        for (let i = 0; i < maxRetries; i++) {\n            const nextIndex = Math.floor(getRandom() * width * height), pixelPos = {\n                x: nextIndex % width,\n                y: Math.floor(nextIndex / width),\n            }, pixel = data.pixels[pixelPos.y][pixelPos.x], shouldCreateParticle = this.filter(pixel);\n            if (!shouldCreateParticle) {\n                continue;\n            }\n            return {\n                position: {\n                    x: pixelPos.x * scale + positionOffset.x,\n                    y: pixelPos.y * scale + positionOffset.y,\n                },\n                color: { ...pixel },\n                opacity: pixel.a,\n            };\n        }\n        return null;\n    }\n    resize(position, size) {\n        super.resize(position, size);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}