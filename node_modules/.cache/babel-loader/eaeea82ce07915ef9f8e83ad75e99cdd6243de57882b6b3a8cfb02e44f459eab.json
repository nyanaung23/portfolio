{"ast":null,"code":"import { shuffleSeed } from \"../utils.js\";\nexport class SimplexNoise2D {\n  constructor() {\n    this._NORM_2D = 1.0 / 47.0;\n    this._SQUISH_2D = (Math.sqrt(2 + 1) - 1) / 2;\n    this._STRETCH_2D = (1 / Math.sqrt(2 + 1) - 1) / 2;\n    this._base2D = [[1, 1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 1, 2, 1, 1]];\n    this._gradients2D = [5, 2, 2, 5, -5, 2, -2, 5, 5, -2, 2, -5, -5, -2, -2, -5];\n    this._lookup = [];\n    this._lookupPairs2D = [0, 1, 1, 0, 4, 1, 17, 0, 20, 2, 21, 2, 22, 5, 23, 5, 26, 4, 39, 3, 42, 4, 43, 3];\n    this._p2D = [0, 0, 1, -1, 0, 0, -1, 1, 0, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0];\n    this._perm = new Uint8Array(256);\n    this._perm2D = new Uint8Array(256);\n  }\n  noise(x, y) {\n    const {\n      _gradients2D,\n      _NORM_2D,\n      _SQUISH_2D,\n      _STRETCH_2D,\n      _lookup,\n      _perm,\n      _perm2D\n    } = this;\n    const stretchOffset = (x + y) * _STRETCH_2D,\n      xs = x + stretchOffset,\n      ys = y + stretchOffset,\n      xsb = Math.floor(xs),\n      ysb = Math.floor(ys),\n      squishOffset = (xsb + ysb) * _SQUISH_2D,\n      dx0 = x - (xsb + squishOffset),\n      dy0 = y - (ysb + squishOffset),\n      xins = xs - xsb,\n      yins = ys - ysb,\n      inSum = xins + yins,\n      hash = xins - yins + 1 | inSum << 1 | inSum + yins << 2 | inSum + xins << 4;\n    let value = 0;\n    for (let c = _lookup[hash]; c !== undefined; c = c.next) {\n      const dx = dx0 + c.dx,\n        dy = dy0 + c.dy,\n        attn = 2 - dx * dx - dy * dy;\n      if (attn > 0) {\n        const px = xsb + c.xsb,\n          py = ysb + c.ysb,\n          indexPartA = _perm[px & 0xff],\n          index = _perm2D[indexPartA + py & 0xff],\n          valuePart = _gradients2D[index] * dx + _gradients2D[index + 1] * dy;\n        value += attn * attn * attn * attn * valuePart;\n      }\n    }\n    return value * _NORM_2D;\n  }\n  seed(clientSeed) {\n    const {\n      _p2D,\n      _base2D,\n      _lookupPairs2D\n    } = this;\n    const contributions = [];\n    for (let i = 0; i < _p2D.length; i += 4) {\n      const baseSet = _base2D[_p2D[i]];\n      let previous = null,\n        current = null;\n      for (let k = 0; k < baseSet.length; k += 3) {\n        current = this._contribution2D(baseSet[k], baseSet[k + 1], baseSet[k + 2]);\n        if (previous === null) {\n          contributions[i / 4] = current;\n        } else {\n          previous.next = current;\n        }\n        previous = current;\n      }\n      if (current) {\n        current.next = this._contribution2D(_p2D[i + 1], _p2D[i + 2], _p2D[i + 3]);\n      }\n    }\n    this._lookup = [];\n    for (let i = 0; i < _lookupPairs2D.length; i += 2) {\n      this._lookup[_lookupPairs2D[i]] = contributions[_lookupPairs2D[i + 1]];\n    }\n    this._perm = new Uint8Array(256);\n    this._perm2D = new Uint8Array(256);\n    const source = new Uint8Array(256);\n    for (let i = 0; i < 256; i++) {\n      source[i] = i;\n    }\n    let seed = new Uint32Array(1);\n    seed[0] = clientSeed;\n    seed = shuffleSeed(shuffleSeed(shuffleSeed(seed)));\n    for (let i = 255; i >= 0; i--) {\n      seed = shuffleSeed(seed);\n      const r = new Uint32Array(1);\n      r[0] = (seed[0] + 31) % (i + 1);\n      if (r[0] < 0) {\n        r[0] += i + 1;\n      }\n      this._perm[i] = source[r[0]];\n      this._perm2D[i] = this._perm[i] & 0x0e;\n      source[r[0]] = source[i];\n    }\n  }\n  _contribution2D(multiplier, xsb, ysb) {\n    const {\n      _SQUISH_2D\n    } = this;\n    return {\n      dx: -xsb - multiplier * _SQUISH_2D,\n      dy: -ysb - multiplier * _SQUISH_2D,\n      xsb,\n      ysb\n    };\n  }\n}","map":{"version":3,"names":["shuffleSeed","SimplexNoise2D","constructor","_NORM_2D","_SQUISH_2D","Math","sqrt","_STRETCH_2D","_base2D","_gradients2D","_lookup","_lookupPairs2D","_p2D","_perm","Uint8Array","_perm2D","noise","x","y","stretchOffset","xs","ys","xsb","floor","ysb","squishOffset","dx0","dy0","xins","yins","inSum","hash","value","c","undefined","next","dx","dy","attn","px","py","indexPartA","index","valuePart","seed","clientSeed","contributions","i","length","baseSet","previous","current","k","_contribution2D","source","Uint32Array","r","multiplier"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/simplex-noise/browser/Classes/SimplexNoise2D.js"],"sourcesContent":["import { shuffleSeed } from \"../utils.js\";\nexport class SimplexNoise2D {\n    constructor() {\n        this._NORM_2D = 1.0 / 47.0;\n        this._SQUISH_2D = (Math.sqrt(2 + 1) - 1) / 2;\n        this._STRETCH_2D = (1 / Math.sqrt(2 + 1) - 1) / 2;\n        this._base2D = [\n            [1, 1, 0, 1, 0, 1, 0, 0, 0],\n            [1, 1, 0, 1, 0, 1, 2, 1, 1],\n        ];\n        this._gradients2D = [\n            5,\n            2,\n            2,\n            5,\n            -5,\n            2,\n            -2,\n            5,\n            5,\n            -2,\n            2,\n            -5,\n            -5,\n            -2,\n            -2,\n            -5,\n        ];\n        this._lookup = [];\n        this._lookupPairs2D = [\n            0,\n            1,\n            1,\n            0,\n            4,\n            1,\n            17,\n            0,\n            20,\n            2,\n            21,\n            2,\n            22,\n            5,\n            23,\n            5,\n            26,\n            4,\n            39,\n            3,\n            42,\n            4,\n            43,\n            3,\n        ];\n        this._p2D = [\n            0,\n            0,\n            1,\n            -1,\n            0,\n            0,\n            -1,\n            1,\n            0,\n            2,\n            1,\n            1,\n            1,\n            2,\n            2,\n            0,\n            1,\n            2,\n            0,\n            2,\n            1,\n            0,\n            0,\n            0,\n        ];\n        this._perm = new Uint8Array(256);\n        this._perm2D = new Uint8Array(256);\n    }\n    noise(x, y) {\n        const { _gradients2D, _NORM_2D, _SQUISH_2D, _STRETCH_2D, _lookup, _perm, _perm2D } = this;\n        const stretchOffset = (x + y) * _STRETCH_2D, xs = x + stretchOffset, ys = y + stretchOffset, xsb = Math.floor(xs), ysb = Math.floor(ys), squishOffset = (xsb + ysb) * _SQUISH_2D, dx0 = x - (xsb + squishOffset), dy0 = y - (ysb + squishOffset), xins = xs - xsb, yins = ys - ysb, inSum = xins + yins, hash = (xins - yins + 1) | (inSum << 1) | ((inSum + yins) << 2) | ((inSum + xins) << 4);\n        let value = 0;\n        for (let c = _lookup[hash]; c !== undefined; c = c.next) {\n            const dx = dx0 + c.dx, dy = dy0 + c.dy, attn = 2 - dx * dx - dy * dy;\n            if (attn > 0) {\n                const px = xsb + c.xsb, py = ysb + c.ysb, indexPartA = _perm[px & 0xff], index = _perm2D[(indexPartA + py) & 0xff], valuePart = _gradients2D[index] * dx + _gradients2D[index + 1] * dy;\n                value += attn * attn * attn * attn * valuePart;\n            }\n        }\n        return value * _NORM_2D;\n    }\n    seed(clientSeed) {\n        const { _p2D, _base2D, _lookupPairs2D } = this;\n        const contributions = [];\n        for (let i = 0; i < _p2D.length; i += 4) {\n            const baseSet = _base2D[_p2D[i]];\n            let previous = null, current = null;\n            for (let k = 0; k < baseSet.length; k += 3) {\n                current = this._contribution2D(baseSet[k], baseSet[k + 1], baseSet[k + 2]);\n                if (previous === null) {\n                    contributions[i / 4] = current;\n                }\n                else {\n                    previous.next = current;\n                }\n                previous = current;\n            }\n            if (current) {\n                current.next = this._contribution2D(_p2D[i + 1], _p2D[i + 2], _p2D[i + 3]);\n            }\n        }\n        this._lookup = [];\n        for (let i = 0; i < _lookupPairs2D.length; i += 2) {\n            this._lookup[_lookupPairs2D[i]] = contributions[_lookupPairs2D[i + 1]];\n        }\n        this._perm = new Uint8Array(256);\n        this._perm2D = new Uint8Array(256);\n        const source = new Uint8Array(256);\n        for (let i = 0; i < 256; i++) {\n            source[i] = i;\n        }\n        let seed = new Uint32Array(1);\n        seed[0] = clientSeed;\n        seed = shuffleSeed(shuffleSeed(shuffleSeed(seed)));\n        for (let i = 255; i >= 0; i--) {\n            seed = shuffleSeed(seed);\n            const r = new Uint32Array(1);\n            r[0] = (seed[0] + 31) % (i + 1);\n            if (r[0] < 0) {\n                r[0] += i + 1;\n            }\n            this._perm[i] = source[r[0]];\n            this._perm2D[i] = this._perm[i] & 0x0e;\n            source[r[0]] = source[i];\n        }\n    }\n    _contribution2D(multiplier, xsb, ysb) {\n        const { _SQUISH_2D } = this;\n        return {\n            dx: -xsb - multiplier * _SQUISH_2D,\n            dy: -ysb - multiplier * _SQUISH_2D,\n            xsb,\n            ysb,\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}