{"ast":null,"code":"import { Vector, deepExtend, getRandom } from \"@tsparticles/engine\";\nimport { PerlinNoise } from \"@tsparticles/perlin-noise\";\nconst double = 2,\n  doublePI = Math.PI * double,\n  defaultOptions = {\n    draw: false,\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    layers: 0,\n    width: 0,\n    height: 0,\n    factor: {\n      angle: 0.02,\n      length: 0.01\n    },\n    offset: {\n      x: 40000,\n      y: 40000,\n      z: 40000\n    }\n  };\nexport class PerlinNoiseGenerator {\n  constructor() {\n    this.noiseGen = new PerlinNoise();\n    this.field = [];\n    this.noiseW = 0;\n    this.options = deepExtend({}, defaultOptions);\n  }\n  generate(particle) {\n    const pos = particle.getPosition(),\n      {\n        size\n      } = this.options,\n      point = {\n        x: Math.max(Math.floor(pos.x / size), 0),\n        y: Math.max(Math.floor(pos.y / size), 0),\n        z: Math.max(Math.floor(pos.z / size), 0)\n      },\n      v = Vector.origin,\n      {\n        field\n      } = this;\n    return field?.[point.x]?.[point.y]?.[point.z] ? field[point.x][point.y][point.z].copy() : v;\n  }\n  init(container) {\n    this.container = container;\n    this._setup();\n  }\n  reset() {}\n  update() {\n    if (!this.container) {\n      return;\n    }\n    this._calculateField();\n    this.noiseW += this.options.increment;\n    if (this.options.draw) {\n      this.container.canvas.draw(ctx => this._drawField(ctx));\n    }\n  }\n  _calculateField() {\n    const {\n        field,\n        noiseGen,\n        options,\n        noiseW\n      } = this,\n      lengthFactor = options.factor.length,\n      angleFactor = options.factor.angle;\n    for (let x = 0; x < options.columns; x++) {\n      for (let y = 0; y < options.rows; y++) {\n        for (let z = 0; z < options.layers; z++) {\n          const cell = field[x][y][z];\n          cell.length = noiseGen.noise4d(x * lengthFactor + options.offset.x, y * lengthFactor + options.offset.y, z * lengthFactor + options.offset.z, noiseW);\n          cell.angle = noiseGen.noise4d(x * angleFactor, y * angleFactor, z * angleFactor, noiseW) * doublePI;\n        }\n      }\n    }\n  }\n  _drawField(ctx) {\n    const {\n      field,\n      options\n    } = this;\n    for (let x = 0; x < options.columns; x++) {\n      const column = field[x];\n      for (let y = 0; y < options.rows; y++) {\n        const cell = column[y][0],\n          {\n            angle,\n            length\n          } = cell;\n        ctx.setTransform(1, 0, 0, 1, x * this.options.size, y * this.options.size);\n        ctx.rotate(angle);\n        ctx.strokeStyle = \"white\";\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, this.options.size * length);\n        ctx.stroke();\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n      }\n    }\n  }\n  _initField() {\n    const {\n      columns,\n      rows,\n      layers\n    } = this.options;\n    this.field = new Array(columns);\n    for (let x = 0; x < columns; x++) {\n      this.field[x] = new Array(rows);\n      for (let y = 0; y < rows; y++) {\n        this.field[x][y] = new Array(layers);\n        for (let z = 0; z < layers; z++) {\n          this.field[x][y][z] = Vector.origin;\n        }\n      }\n    }\n  }\n  _resetField() {\n    const container = this.container;\n    if (!container) {\n      return;\n    }\n    const sourceOptions = container.actualOptions.particles.move.path.options,\n      {\n        options\n      } = this;\n    options.width = container.canvas.size.width;\n    options.height = container.canvas.size.height;\n    options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n    options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n    options.draw = !!sourceOptions.draw;\n    const offset = sourceOptions.offset;\n    options.offset.x = offset?.x ?? defaultOptions.offset.x;\n    options.offset.y = offset?.y ?? defaultOptions.offset.y;\n    options.offset.z = offset?.z ?? defaultOptions.offset.z;\n    const factor = sourceOptions.factor;\n    options.factor.angle = factor?.angle ?? defaultOptions.factor.angle;\n    options.factor.length = factor?.length ?? defaultOptions.factor.length;\n    options.seed = sourceOptions.seed;\n    this.noiseGen.seed(options.seed ?? getRandom());\n    options.columns = Math.floor(options.width / options.size) + 1;\n    options.rows = Math.floor(options.height / options.size) + 1;\n    options.layers = Math.floor(container.zLayers / options.size) + 1;\n    this._initField();\n  }\n  _setup() {\n    this.noiseW = 0;\n    this._resetField();\n    addEventListener(\"resize\", () => this._resetField());\n  }\n}","map":{"version":3,"names":["Vector","deepExtend","getRandom","PerlinNoise","double","doublePI","Math","PI","defaultOptions","draw","size","increment","columns","rows","layers","width","height","factor","angle","length","offset","x","y","z","PerlinNoiseGenerator","constructor","noiseGen","field","noiseW","options","generate","particle","pos","getPosition","point","max","floor","v","origin","copy","init","container","_setup","reset","update","_calculateField","canvas","ctx","_drawField","lengthFactor","angleFactor","cell","noise4d","column","setTransform","rotate","strokeStyle","beginPath","moveTo","lineTo","stroke","_initField","Array","_resetField","sourceOptions","actualOptions","particles","move","path","seed","zLayers","addEventListener"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/path-perlin-noise/browser/PerlinNoiseGenerator.js"],"sourcesContent":["import { Vector, deepExtend, getRandom, } from \"@tsparticles/engine\";\nimport { PerlinNoise } from \"@tsparticles/perlin-noise\";\nconst double = 2, doublePI = Math.PI * double, defaultOptions = {\n    draw: false,\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    layers: 0,\n    width: 0,\n    height: 0,\n    factor: {\n        angle: 0.02,\n        length: 0.01,\n    },\n    offset: {\n        x: 40000,\n        y: 40000,\n        z: 40000,\n    },\n};\nexport class PerlinNoiseGenerator {\n    constructor() {\n        this.noiseGen = new PerlinNoise();\n        this.field = [];\n        this.noiseW = 0;\n        this.options = deepExtend({}, defaultOptions);\n    }\n    generate(particle) {\n        const pos = particle.getPosition(), { size } = this.options, point = {\n            x: Math.max(Math.floor(pos.x / size), 0),\n            y: Math.max(Math.floor(pos.y / size), 0),\n            z: Math.max(Math.floor(pos.z / size), 0),\n        }, v = Vector.origin, { field } = this;\n        return field?.[point.x]?.[point.y]?.[point.z] ? field[point.x][point.y][point.z].copy() : v;\n    }\n    init(container) {\n        this.container = container;\n        this._setup();\n    }\n    reset() {\n    }\n    update() {\n        if (!this.container) {\n            return;\n        }\n        this._calculateField();\n        this.noiseW += this.options.increment;\n        if (this.options.draw) {\n            this.container.canvas.draw(ctx => this._drawField(ctx));\n        }\n    }\n    _calculateField() {\n        const { field, noiseGen, options, noiseW } = this, lengthFactor = options.factor.length, angleFactor = options.factor.angle;\n        for (let x = 0; x < options.columns; x++) {\n            for (let y = 0; y < options.rows; y++) {\n                for (let z = 0; z < options.layers; z++) {\n                    const cell = field[x][y][z];\n                    cell.length = noiseGen.noise4d(x * lengthFactor + options.offset.x, y * lengthFactor + options.offset.y, z * lengthFactor + options.offset.z, noiseW);\n                    cell.angle = noiseGen.noise4d(x * angleFactor, y * angleFactor, z * angleFactor, noiseW) * doublePI;\n                }\n            }\n        }\n    }\n    _drawField(ctx) {\n        const { field, options } = this;\n        for (let x = 0; x < options.columns; x++) {\n            const column = field[x];\n            for (let y = 0; y < options.rows; y++) {\n                const cell = column[y][0], { angle, length } = cell;\n                ctx.setTransform(1, 0, 0, 1, x * this.options.size, y * this.options.size);\n                ctx.rotate(angle);\n                ctx.strokeStyle = \"white\";\n                ctx.beginPath();\n                ctx.moveTo(0, 0);\n                ctx.lineTo(0, this.options.size * length);\n                ctx.stroke();\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n            }\n        }\n    }\n    _initField() {\n        const { columns, rows, layers } = this.options;\n        this.field = new Array(columns);\n        for (let x = 0; x < columns; x++) {\n            this.field[x] = new Array(rows);\n            for (let y = 0; y < rows; y++) {\n                this.field[x][y] = new Array(layers);\n                for (let z = 0; z < layers; z++) {\n                    this.field[x][y][z] = Vector.origin;\n                }\n            }\n        }\n    }\n    _resetField() {\n        const container = this.container;\n        if (!container) {\n            return;\n        }\n        const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;\n        options.width = container.canvas.size.width;\n        options.height = container.canvas.size.height;\n        options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n        options.increment =\n            sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n        options.draw = !!sourceOptions.draw;\n        const offset = sourceOptions.offset;\n        options.offset.x = offset?.x ?? defaultOptions.offset.x;\n        options.offset.y = offset?.y ?? defaultOptions.offset.y;\n        options.offset.z = offset?.z ?? defaultOptions.offset.z;\n        const factor = sourceOptions.factor;\n        options.factor.angle = factor?.angle ?? defaultOptions.factor.angle;\n        options.factor.length = factor?.length ?? defaultOptions.factor.length;\n        options.seed = sourceOptions.seed;\n        this.noiseGen.seed(options.seed ?? getRandom());\n        options.columns = Math.floor(options.width / options.size) + 1;\n        options.rows = Math.floor(options.height / options.size) + 1;\n        options.layers = Math.floor(container.zLayers / options.size) + 1;\n        this._initField();\n    }\n    _setup() {\n        this.noiseW = 0;\n        this._resetField();\n        addEventListener(\"resize\", () => this._resetField());\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}