{"ast":null,"code":"import { Vector, deepExtend, getRandom } from \"@tsparticles/engine\";\nimport { FractalNoise } from \"@tsparticles/fractal-noise\";\nconst defaultOptions = {\n  size: 20,\n  increment: 0.004,\n  columns: 0,\n  rows: 0,\n  layers: 0,\n  width: 0,\n  height: 0,\n  offset: {\n    x: 40000,\n    y: 40000,\n    z: 40000\n  }\n};\nexport class FractalNoiseGenerator {\n  constructor() {\n    this._fractal = new FractalNoise();\n    this.field = [];\n    this.noiseW = 0;\n    this.options = deepExtend({}, defaultOptions);\n  }\n  generate(particle) {\n    const pos = particle.getPosition(),\n      point = {\n        x: Math.max(Math.floor(pos.x / this.options.size), 0),\n        y: Math.max(Math.floor(pos.y / this.options.size), 0),\n        z: Math.max(Math.floor(pos.z / this.options.size), 0)\n      },\n      v = Vector.origin;\n    if (!this.field?.[point.x]?.[point.y]?.[point.z]) {\n      return v;\n    }\n    v.setTo(this.field[point.x][point.y][point.z]);\n    return v;\n  }\n  init(container) {\n    this.container = container;\n    this._setup();\n  }\n  reset() {}\n  update() {\n    if (!this.container) {\n      return;\n    }\n    this._calculateField();\n    this.noiseW += this.options.increment;\n  }\n  _calculateField() {\n    const options = this.options;\n    for (let x = 0; x < options.columns; x++) {\n      for (let y = 0; y < options.rows; y++) {\n        for (let z = 0; z < options.layers; z++) {\n          this.field[x][y][z].angle = this._fractal.noise4d(x / 50, y / 50, z / 50, this.noiseW) * Math.PI * 2;\n          this.field[x][y][z].length = this._fractal.noise4d(x / 100 + options.offset.x, y / 100 + options.offset.y, z / 100 + options.offset.z, this.noiseW);\n        }\n      }\n    }\n  }\n  _initField() {\n    this.field = new Array(this.options.columns);\n    for (let x = 0; x < this.options.columns; x++) {\n      this.field[x] = new Array(this.options.rows);\n      for (let y = 0; y < this.options.rows; y++) {\n        this.field[x][y] = new Array(this.options.layers);\n        for (let z = 0; z < this.options.layers; z++) {\n          this.field[x][y][z] = Vector.origin;\n        }\n      }\n    }\n  }\n  _resetField() {\n    const container = this.container;\n    if (!container) {\n      return;\n    }\n    const sourceOptions = container.actualOptions.particles.move.path.options;\n    this.options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n    this.options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n    this.options.width = container.canvas.size.width;\n    this.options.height = container.canvas.size.height;\n    const offset = sourceOptions.offset;\n    this.options.offset.x = offset?.x ?? defaultOptions.offset.x;\n    this.options.offset.y = offset?.y ?? defaultOptions.offset.y;\n    this.options.offset.z = offset?.z ?? defaultOptions.offset.z;\n    this.options.seed = sourceOptions.seed;\n    this._fractal.seed(this.options.seed ?? getRandom());\n    this.options.columns = Math.floor(this.options.width / this.options.size) + 1;\n    this.options.rows = Math.floor(this.options.height / this.options.size) + 1;\n    this.options.layers = Math.floor(container.zLayers / this.options.size) + 1;\n    this._initField();\n  }\n  _setup() {\n    this.noiseW = 0;\n    this._resetField();\n    addEventListener(\"resize\", () => this._resetField());\n  }\n}","map":{"version":3,"names":["Vector","deepExtend","getRandom","FractalNoise","defaultOptions","size","increment","columns","rows","layers","width","height","offset","x","y","z","FractalNoiseGenerator","constructor","_fractal","field","noiseW","options","generate","particle","pos","getPosition","point","Math","max","floor","v","origin","setTo","init","container","_setup","reset","update","_calculateField","angle","noise4d","PI","length","_initField","Array","_resetField","sourceOptions","actualOptions","particles","move","path","canvas","seed","zLayers","addEventListener"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/path-fractal-noise/browser/FractalNoiseGenerator.js"],"sourcesContent":["import { Vector, deepExtend, getRandom, } from \"@tsparticles/engine\";\nimport { FractalNoise } from \"@tsparticles/fractal-noise\";\nconst defaultOptions = {\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    layers: 0,\n    width: 0,\n    height: 0,\n    offset: {\n        x: 40000,\n        y: 40000,\n        z: 40000,\n    },\n};\nexport class FractalNoiseGenerator {\n    constructor() {\n        this._fractal = new FractalNoise();\n        this.field = [];\n        this.noiseW = 0;\n        this.options = deepExtend({}, defaultOptions);\n    }\n    generate(particle) {\n        const pos = particle.getPosition(), point = {\n            x: Math.max(Math.floor(pos.x / this.options.size), 0),\n            y: Math.max(Math.floor(pos.y / this.options.size), 0),\n            z: Math.max(Math.floor(pos.z / this.options.size), 0),\n        }, v = Vector.origin;\n        if (!this.field?.[point.x]?.[point.y]?.[point.z]) {\n            return v;\n        }\n        v.setTo(this.field[point.x][point.y][point.z]);\n        return v;\n    }\n    init(container) {\n        this.container = container;\n        this._setup();\n    }\n    reset() {\n    }\n    update() {\n        if (!this.container) {\n            return;\n        }\n        this._calculateField();\n        this.noiseW += this.options.increment;\n    }\n    _calculateField() {\n        const options = this.options;\n        for (let x = 0; x < options.columns; x++) {\n            for (let y = 0; y < options.rows; y++) {\n                for (let z = 0; z < options.layers; z++) {\n                    this.field[x][y][z].angle =\n                        this._fractal.noise4d(x / 50, y / 50, z / 50, this.noiseW) * Math.PI * 2;\n                    this.field[x][y][z].length = this._fractal.noise4d(x / 100 + options.offset.x, y / 100 + options.offset.y, z / 100 + options.offset.z, this.noiseW);\n                }\n            }\n        }\n    }\n    _initField() {\n        this.field = new Array(this.options.columns);\n        for (let x = 0; x < this.options.columns; x++) {\n            this.field[x] = new Array(this.options.rows);\n            for (let y = 0; y < this.options.rows; y++) {\n                this.field[x][y] = new Array(this.options.layers);\n                for (let z = 0; z < this.options.layers; z++) {\n                    this.field[x][y][z] = Vector.origin;\n                }\n            }\n        }\n    }\n    _resetField() {\n        const container = this.container;\n        if (!container) {\n            return;\n        }\n        const sourceOptions = container.actualOptions.particles.move.path.options;\n        this.options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n        this.options.increment =\n            sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n        this.options.width = container.canvas.size.width;\n        this.options.height = container.canvas.size.height;\n        const offset = sourceOptions.offset;\n        this.options.offset.x = offset?.x ?? defaultOptions.offset.x;\n        this.options.offset.y = offset?.y ?? defaultOptions.offset.y;\n        this.options.offset.z = offset?.z ?? defaultOptions.offset.z;\n        this.options.seed = sourceOptions.seed;\n        this._fractal.seed(this.options.seed ?? getRandom());\n        this.options.columns = Math.floor(this.options.width / this.options.size) + 1;\n        this.options.rows = Math.floor(this.options.height / this.options.size) + 1;\n        this.options.layers = Math.floor(container.zLayers / this.options.size) + 1;\n        this._initField();\n    }\n    _setup() {\n        this.noiseW = 0;\n        this._resetField();\n        addEventListener(\"resize\", () => this._resetField());\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}