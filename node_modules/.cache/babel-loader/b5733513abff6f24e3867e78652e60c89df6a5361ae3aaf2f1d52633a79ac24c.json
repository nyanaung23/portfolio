{"ast":null,"code":"import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst defaultDistance = 0,\n  double = 2,\n  doublePI = Math.PI * double,\n  distanceFactor = 60;\nexport function updateWobble(particle, delta) {\n  const {\n      wobble: wobbleOptions\n    } = particle.options,\n    {\n      container,\n      wobble\n    } = particle;\n  if (!wobbleOptions?.enable || !wobble) {\n    return;\n  }\n  const reduceFactor = container.retina.reduceFactor,\n    angleSpeed = wobble.angleSpeed * delta.factor * reduceFactor,\n    moveSpeed = wobble.moveSpeed * delta.factor * reduceFactor,\n    distance = moveSpeed * (particle.retina.wobbleDistance ?? defaultDistance) / (millisecondsToSeconds / distanceFactor),\n    max = doublePI,\n    {\n      position\n    } = particle;\n  wobble.angle += angleSpeed;\n  if (wobble.angle > max) {\n    wobble.angle -= max;\n  }\n  position.x += distance * Math.cos(wobble.angle);\n  position.y += distance * Math.abs(Math.sin(wobble.angle));\n}","map":{"version":3,"names":["millisecondsToSeconds","defaultDistance","double","doublePI","Math","PI","distanceFactor","updateWobble","particle","delta","wobble","wobbleOptions","options","container","enable","reduceFactor","retina","angleSpeed","factor","moveSpeed","distance","wobbleDistance","max","position","angle","x","cos","y","abs","sin"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/updater-wobble/browser/Utils.js"],"sourcesContent":["import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst defaultDistance = 0, double = 2, doublePI = Math.PI * double, distanceFactor = 60;\nexport function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { container, wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const reduceFactor = container.retina.reduceFactor, angleSpeed = wobble.angleSpeed * delta.factor * reduceFactor, moveSpeed = wobble.moveSpeed * delta.factor * reduceFactor, distance = (moveSpeed * (particle.retina.wobbleDistance ?? defaultDistance)) /\n        (millisecondsToSeconds / distanceFactor), max = doublePI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,qBAAqB;AAC3D,MAAMC,eAAe,GAAG,CAAC;EAAEC,MAAM,GAAG,CAAC;EAAEC,QAAQ,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;EAAEI,cAAc,GAAG,EAAE;AACvF,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAEC,KAAK,EAAE;EAC1C,MAAM;MAAEC,MAAM,EAAEC;IAAc,CAAC,GAAGH,QAAQ,CAACI,OAAO;IAAE;MAAEC,SAAS;MAAEH;IAAO,CAAC,GAAGF,QAAQ;EACpF,IAAI,CAACG,aAAa,EAAEG,MAAM,IAAI,CAACJ,MAAM,EAAE;IACnC;EACJ;EACA,MAAMK,YAAY,GAAGF,SAAS,CAACG,MAAM,CAACD,YAAY;IAAEE,UAAU,GAAGP,MAAM,CAACO,UAAU,GAAGR,KAAK,CAACS,MAAM,GAAGH,YAAY;IAAEI,SAAS,GAAGT,MAAM,CAACS,SAAS,GAAGV,KAAK,CAACS,MAAM,GAAGH,YAAY;IAAEK,QAAQ,GAAID,SAAS,IAAIX,QAAQ,CAACQ,MAAM,CAACK,cAAc,IAAIpB,eAAe,CAAC,IACpPD,qBAAqB,GAAGM,cAAc,CAAC;IAAEgB,GAAG,GAAGnB,QAAQ;IAAE;MAAEoB;IAAS,CAAC,GAAGf,QAAQ;EACrFE,MAAM,CAACc,KAAK,IAAIP,UAAU;EAC1B,IAAIP,MAAM,CAACc,KAAK,GAAGF,GAAG,EAAE;IACpBZ,MAAM,CAACc,KAAK,IAAIF,GAAG;EACvB;EACAC,QAAQ,CAACE,CAAC,IAAIL,QAAQ,GAAGhB,IAAI,CAACsB,GAAG,CAAChB,MAAM,CAACc,KAAK,CAAC;EAC/CD,QAAQ,CAACI,CAAC,IAAIP,QAAQ,GAAGhB,IAAI,CAACwB,GAAG,CAACxB,IAAI,CAACyB,GAAG,CAACnB,MAAM,CAACc,KAAK,CAAC,CAAC;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}