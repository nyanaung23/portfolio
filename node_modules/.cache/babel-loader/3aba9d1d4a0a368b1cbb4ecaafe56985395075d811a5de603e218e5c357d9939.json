{"ast":null,"code":"import { Vector, getRandom, isFunction, isString } from \"@tsparticles/engine\";\nimport { CurvesPathGen } from \"./Curves.js\";\nconst double = 2,\n  doublePI = Math.PI * double;\nfunction randomVelocity() {\n  const offset = 0.8,\n    factor = 0.6;\n  return getRandom() * factor + offset;\n}\nexport class CurvesPathGenerator {\n  constructor() {\n    this.options = {\n      rndFunc: null,\n      period: 100,\n      nbHarmonics: 2,\n      attenHarmonics: 0.8,\n      lowValue: -0.03,\n      highValue: 0.03\n    };\n  }\n  generate(p) {\n    if (!p.pathGen) {\n      const options = this.options;\n      p.pathGen = CurvesPathGen(options.rndFunc, options.period, options.nbHarmonics, options.attenHarmonics, options.lowValue, options.highValue);\n    }\n    if (!p.curveVelocity) {\n      p.curveVelocity = Vector.origin;\n      p.curveVelocity.length = randomVelocity();\n      p.curveVelocity.angle = getRandom() * doublePI;\n    } else {\n      p.curveVelocity.length += 0.01;\n      p.curveVelocity.angle = (p.curveVelocity.angle + p.pathGen()) % doublePI;\n    }\n    p.velocity.x = 0;\n    p.velocity.y = 0;\n    return p.curveVelocity;\n  }\n  init(container) {\n    const sourceOptions = container.actualOptions.particles.move.path.options,\n      {\n        options\n      } = this;\n    if (isFunction(sourceOptions.rndFunc)) {\n      options.rndFunc = sourceOptions.rndFunc;\n    } else if (isString(sourceOptions.rndFunc)) {\n      options.rndFunc = window[sourceOptions.rndFunc] ?? this.options.rndFunc;\n    }\n    options.period = sourceOptions.period ?? options.period;\n    options.nbHarmonics = sourceOptions.nbHarmonics ?? options.nbHarmonics;\n    options.attenHarmonics = sourceOptions.attenHarmonics ?? options.attenHarmonics;\n    options.lowValue = sourceOptions.lowValue ?? options.lowValue;\n    options.highValue = sourceOptions.highValue ?? options.highValue;\n  }\n  reset(particle) {\n    delete particle.pathGen;\n    delete particle.curveVelocity;\n  }\n  update() {}\n}","map":{"version":3,"names":["Vector","getRandom","isFunction","isString","CurvesPathGen","double","doublePI","Math","PI","randomVelocity","offset","factor","CurvesPathGenerator","constructor","options","rndFunc","period","nbHarmonics","attenHarmonics","lowValue","highValue","generate","p","pathGen","curveVelocity","origin","length","angle","velocity","x","y","init","container","sourceOptions","actualOptions","particles","move","path","window","reset","particle","update"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/path-curves/browser/CurvesPathGenerator.js"],"sourcesContent":["import { Vector, getRandom, isFunction, isString } from \"@tsparticles/engine\";\nimport { CurvesPathGen } from \"./Curves.js\";\nconst double = 2, doublePI = Math.PI * double;\nfunction randomVelocity() {\n    const offset = 0.8, factor = 0.6;\n    return getRandom() * factor + offset;\n}\nexport class CurvesPathGenerator {\n    constructor() {\n        this.options = {\n            rndFunc: null,\n            period: 100,\n            nbHarmonics: 2,\n            attenHarmonics: 0.8,\n            lowValue: -0.03,\n            highValue: 0.03,\n        };\n    }\n    generate(p) {\n        if (!p.pathGen) {\n            const options = this.options;\n            p.pathGen = CurvesPathGen(options.rndFunc, options.period, options.nbHarmonics, options.attenHarmonics, options.lowValue, options.highValue);\n        }\n        if (!p.curveVelocity) {\n            p.curveVelocity = Vector.origin;\n            p.curveVelocity.length = randomVelocity();\n            p.curveVelocity.angle = getRandom() * doublePI;\n        }\n        else {\n            p.curveVelocity.length += 0.01;\n            p.curveVelocity.angle = (p.curveVelocity.angle + p.pathGen()) % doublePI;\n        }\n        p.velocity.x = 0;\n        p.velocity.y = 0;\n        return p.curveVelocity;\n    }\n    init(container) {\n        const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;\n        if (isFunction(sourceOptions.rndFunc)) {\n            options.rndFunc = sourceOptions.rndFunc;\n        }\n        else if (isString(sourceOptions.rndFunc)) {\n            options.rndFunc =\n                window[sourceOptions.rndFunc] ?? this.options.rndFunc;\n        }\n        options.period = sourceOptions.period ?? options.period;\n        options.nbHarmonics = sourceOptions.nbHarmonics ?? options.nbHarmonics;\n        options.attenHarmonics = sourceOptions.attenHarmonics ?? options.attenHarmonics;\n        options.lowValue = sourceOptions.lowValue ?? options.lowValue;\n        options.highValue = sourceOptions.highValue ?? options.highValue;\n    }\n    reset(particle) {\n        delete particle.pathGen;\n        delete particle.curveVelocity;\n    }\n    update() {\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}