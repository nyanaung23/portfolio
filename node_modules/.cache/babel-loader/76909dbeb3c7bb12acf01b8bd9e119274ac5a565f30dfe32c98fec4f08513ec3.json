{"ast":null,"code":"import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { degToRad } from \"@tsparticles/engine\";\nimport { generateRandomPointOnPolygonPerimeter, generateRandomPointWithinPolygon, generateRandomPolygon } from \"./utils.js\";\nconst half = 0.5;\nexport class EmittersPolygonShape extends EmitterShapeBase {\n  constructor(position, size, fill, options) {\n    super(position, size, fill, options);\n    this.sides = options.sides;\n    this.angle = degToRad(options.angle);\n    this.polygon = generateRandomPolygon(position, this.sides, size.width * half, this.angle);\n  }\n  async init() {}\n  randomPosition() {\n    const fill = this.fill,\n      polygon = this.polygon,\n      res = fill ? generateRandomPointWithinPolygon(polygon) : generateRandomPointOnPolygonPerimeter(polygon);\n    return res ? {\n      position: res\n    } : null;\n  }\n  resize(position, size) {\n    super.resize(position, size);\n    this.polygon = generateRandomPolygon(position, this.sides, size.width * half, this.angle);\n  }\n}","map":{"version":3,"names":["EmitterShapeBase","degToRad","generateRandomPointOnPolygonPerimeter","generateRandomPointWithinPolygon","generateRandomPolygon","half","EmittersPolygonShape","constructor","position","size","fill","options","sides","angle","polygon","width","init","randomPosition","res","resize"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/EmittersPolygonShape.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { degToRad } from \"@tsparticles/engine\";\nimport { generateRandomPointOnPolygonPerimeter, generateRandomPointWithinPolygon, generateRandomPolygon, } from \"./utils.js\";\nconst half = 0.5;\nexport class EmittersPolygonShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n        this.sides = options.sides;\n        this.angle = degToRad(options.angle);\n        this.polygon = generateRandomPolygon(position, this.sides, size.width * half, this.angle);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const fill = this.fill, polygon = this.polygon, res = fill ? generateRandomPointWithinPolygon(polygon) : generateRandomPointOnPolygonPerimeter(polygon);\n        return res ? { position: res } : null;\n    }\n    resize(position, size) {\n        super.resize(position, size);\n        this.polygon = generateRandomPolygon(position, this.sides, size.width * half, this.angle);\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,qCAAqC,EAAEC,gCAAgC,EAAEC,qBAAqB,QAAS,YAAY;AAC5H,MAAMC,IAAI,GAAG,GAAG;AAChB,OAAO,MAAMC,oBAAoB,SAASN,gBAAgB,CAAC;EACvDO,WAAWA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;IACvC,KAAK,CAACH,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC;IACpC,IAAI,CAACC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC1B,IAAI,CAACC,KAAK,GAAGZ,QAAQ,CAACU,OAAO,CAACE,KAAK,CAAC;IACpC,IAAI,CAACC,OAAO,GAAGV,qBAAqB,CAACI,QAAQ,EAAE,IAAI,CAACI,KAAK,EAAEH,IAAI,CAACM,KAAK,GAAGV,IAAI,EAAE,IAAI,CAACQ,KAAK,CAAC;EAC7F;EACA,MAAMG,IAAIA,CAAA,EAAG,CACb;EACAC,cAAcA,CAAA,EAAG;IACb,MAAMP,IAAI,GAAG,IAAI,CAACA,IAAI;MAAEI,OAAO,GAAG,IAAI,CAACA,OAAO;MAAEI,GAAG,GAAGR,IAAI,GAAGP,gCAAgC,CAACW,OAAO,CAAC,GAAGZ,qCAAqC,CAACY,OAAO,CAAC;IACvJ,OAAOI,GAAG,GAAG;MAAEV,QAAQ,EAAEU;IAAI,CAAC,GAAG,IAAI;EACzC;EACAC,MAAMA,CAACX,QAAQ,EAAEC,IAAI,EAAE;IACnB,KAAK,CAACU,MAAM,CAACX,QAAQ,EAAEC,IAAI,CAAC;IAC5B,IAAI,CAACK,OAAO,GAAGV,qBAAqB,CAACI,QAAQ,EAAE,IAAI,CAACI,KAAK,EAAEH,IAAI,CAACM,KAAK,GAAGV,IAAI,EAAE,IAAI,CAACQ,KAAK,CAAC;EAC7F;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}