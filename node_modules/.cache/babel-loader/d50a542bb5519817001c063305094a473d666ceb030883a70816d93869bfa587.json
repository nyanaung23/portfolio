{"ast":null,"code":"import { SmoothValueNoise } from \"@tsparticles/smooth-value-noise\";\nexport class FractalNoise {\n  constructor() {\n    this._smoothValueNoise = new SmoothValueNoise();\n  }\n  noise2d(x, y, octaves = 5, persistence = 0.5, lacunarity = 2.0) {\n    let total = 0,\n      frequency = 1,\n      amplitude = 1,\n      maxValue = 0;\n    for (let i = 0; i < octaves; i++) {\n      total += this._smoothValueNoise.noise2d(x * frequency, y * frequency) * amplitude;\n      maxValue += amplitude;\n      amplitude *= persistence;\n      frequency *= lacunarity;\n    }\n    return total / maxValue;\n  }\n  noise3d(x, y, z, octaves = 5, persistence = 0.5, lacunarity = 2.0) {\n    let total = 0,\n      frequency = 1,\n      amplitude = 1,\n      maxValue = 0;\n    for (let i = 0; i < octaves; i++) {\n      total += this._smoothValueNoise.noise3d(x * frequency, y * frequency, z * frequency) * amplitude;\n      maxValue += amplitude;\n      amplitude *= persistence;\n      frequency *= lacunarity;\n    }\n    return total / maxValue;\n  }\n  noise4d(x, y, z, w, octaves = 5, persistence = 0.5, lacunarity = 2.0) {\n    let total = 0,\n      frequency = 1,\n      amplitude = 1,\n      maxValue = 0;\n    for (let i = 0; i < octaves; i++) {\n      total += this._smoothValueNoise.noise4d(x * frequency, y * frequency, z * frequency, w * frequency) * amplitude;\n      maxValue += amplitude;\n      amplitude *= persistence;\n      frequency *= lacunarity;\n    }\n    return total / maxValue;\n  }\n  seed(seed) {\n    this._smoothValueNoise.seed(seed);\n  }\n}","map":{"version":3,"names":["SmoothValueNoise","FractalNoise","constructor","_smoothValueNoise","noise2d","x","y","octaves","persistence","lacunarity","total","frequency","amplitude","maxValue","i","noise3d","z","noise4d","w","seed"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/fractal-noise/browser/FractalNoise.js"],"sourcesContent":["import { SmoothValueNoise } from \"@tsparticles/smooth-value-noise\";\nexport class FractalNoise {\n    constructor() {\n        this._smoothValueNoise = new SmoothValueNoise();\n    }\n    noise2d(x, y, octaves = 5, persistence = 0.5, lacunarity = 2.0) {\n        let total = 0, frequency = 1, amplitude = 1, maxValue = 0;\n        for (let i = 0; i < octaves; i++) {\n            total += this._smoothValueNoise.noise2d(x * frequency, y * frequency) * amplitude;\n            maxValue += amplitude;\n            amplitude *= persistence;\n            frequency *= lacunarity;\n        }\n        return total / maxValue;\n    }\n    noise3d(x, y, z, octaves = 5, persistence = 0.5, lacunarity = 2.0) {\n        let total = 0, frequency = 1, amplitude = 1, maxValue = 0;\n        for (let i = 0; i < octaves; i++) {\n            total += this._smoothValueNoise.noise3d(x * frequency, y * frequency, z * frequency) * amplitude;\n            maxValue += amplitude;\n            amplitude *= persistence;\n            frequency *= lacunarity;\n        }\n        return total / maxValue;\n    }\n    noise4d(x, y, z, w, octaves = 5, persistence = 0.5, lacunarity = 2.0) {\n        let total = 0, frequency = 1, amplitude = 1, maxValue = 0;\n        for (let i = 0; i < octaves; i++) {\n            total +=\n                this._smoothValueNoise.noise4d(x * frequency, y * frequency, z * frequency, w * frequency) * amplitude;\n            maxValue += amplitude;\n            amplitude *= persistence;\n            frequency *= lacunarity;\n        }\n        return total / maxValue;\n    }\n    seed(seed) {\n        this._smoothValueNoise.seed(seed);\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,iCAAiC;AAClE,OAAO,MAAMC,YAAY,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,iBAAiB,GAAG,IAAIH,gBAAgB,CAAC,CAAC;EACnD;EACAI,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAEC,OAAO,GAAG,CAAC,EAAEC,WAAW,GAAG,GAAG,EAAEC,UAAU,GAAG,GAAG,EAAE;IAC5D,IAAIC,KAAK,GAAG,CAAC;MAAEC,SAAS,GAAG,CAAC;MAAEC,SAAS,GAAG,CAAC;MAAEC,QAAQ,GAAG,CAAC;IACzD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,OAAO,EAAEO,CAAC,EAAE,EAAE;MAC9BJ,KAAK,IAAI,IAAI,CAACP,iBAAiB,CAACC,OAAO,CAACC,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC,GAAGC,SAAS;MACjFC,QAAQ,IAAID,SAAS;MACrBA,SAAS,IAAIJ,WAAW;MACxBG,SAAS,IAAIF,UAAU;IAC3B;IACA,OAAOC,KAAK,GAAGG,QAAQ;EAC3B;EACAE,OAAOA,CAACV,CAAC,EAAEC,CAAC,EAAEU,CAAC,EAAET,OAAO,GAAG,CAAC,EAAEC,WAAW,GAAG,GAAG,EAAEC,UAAU,GAAG,GAAG,EAAE;IAC/D,IAAIC,KAAK,GAAG,CAAC;MAAEC,SAAS,GAAG,CAAC;MAAEC,SAAS,GAAG,CAAC;MAAEC,QAAQ,GAAG,CAAC;IACzD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,OAAO,EAAEO,CAAC,EAAE,EAAE;MAC9BJ,KAAK,IAAI,IAAI,CAACP,iBAAiB,CAACY,OAAO,CAACV,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,EAAEK,CAAC,GAAGL,SAAS,CAAC,GAAGC,SAAS;MAChGC,QAAQ,IAAID,SAAS;MACrBA,SAAS,IAAIJ,WAAW;MACxBG,SAAS,IAAIF,UAAU;IAC3B;IACA,OAAOC,KAAK,GAAGG,QAAQ;EAC3B;EACAI,OAAOA,CAACZ,CAAC,EAAEC,CAAC,EAAEU,CAAC,EAAEE,CAAC,EAAEX,OAAO,GAAG,CAAC,EAAEC,WAAW,GAAG,GAAG,EAAEC,UAAU,GAAG,GAAG,EAAE;IAClE,IAAIC,KAAK,GAAG,CAAC;MAAEC,SAAS,GAAG,CAAC;MAAEC,SAAS,GAAG,CAAC;MAAEC,QAAQ,GAAG,CAAC;IACzD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,OAAO,EAAEO,CAAC,EAAE,EAAE;MAC9BJ,KAAK,IACD,IAAI,CAACP,iBAAiB,CAACc,OAAO,CAACZ,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,EAAEK,CAAC,GAAGL,SAAS,EAAEO,CAAC,GAAGP,SAAS,CAAC,GAAGC,SAAS;MAC1GC,QAAQ,IAAID,SAAS;MACrBA,SAAS,IAAIJ,WAAW;MACxBG,SAAS,IAAIF,UAAU;IAC3B;IACA,OAAOC,KAAK,GAAGG,QAAQ;EAC3B;EACAM,IAAIA,CAACA,IAAI,EAAE;IACP,IAAI,CAAChB,iBAAiB,CAACgB,IAAI,CAACA,IAAI,CAAC;EACrC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}