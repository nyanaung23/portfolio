{"ast":null,"code":"import { ExternalInteractorBase, isInArray, rangeColorToRgb } from \"@tsparticles/engine\";\nimport { drawLight, lightMode } from \"./Utils.js\";\nimport { Light } from \"./Options/Classes/Light.js\";\nexport class ExternalLighter extends ExternalInteractorBase {\n  constructor(container, engine) {\n    super(container);\n    this._engine = engine;\n  }\n  clear() {}\n  init() {}\n  interact() {\n    const container = this.container,\n      options = container.actualOptions,\n      interactivity = container.interactivity;\n    if (!options.interactivity.events.onHover.enable || interactivity.status !== \"pointermove\") {\n      return;\n    }\n    const mousePos = interactivity.mouse.position;\n    if (!mousePos) {\n      return;\n    }\n    container.canvas.draw(ctx => {\n      drawLight(container, ctx, mousePos);\n    });\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      mouse = container.interactivity.mouse,\n      interactivity = particle?.interactivity ?? container.actualOptions.interactivity,\n      events = interactivity.events;\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n    const res = isInArray(lightMode, events.onHover.mode);\n    if (res && interactivity.modes.light) {\n      const lightGradient = interactivity.modes.light.area.gradient;\n      container.canvas.mouseLight = {\n        start: rangeColorToRgb(this._engine, lightGradient.start),\n        stop: rangeColorToRgb(this._engine, lightGradient.stop)\n      };\n    }\n    return res;\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.light) {\n      options.light = new Light();\n    }\n    for (const source of sources) {\n      options.light.load(source?.light);\n    }\n  }\n  reset() {}\n}","map":{"version":3,"names":["ExternalInteractorBase","isInArray","rangeColorToRgb","drawLight","lightMode","Light","ExternalLighter","constructor","container","engine","_engine","clear","init","interact","options","actualOptions","interactivity","events","onHover","enable","status","mousePos","mouse","position","canvas","draw","ctx","isEnabled","particle","res","mode","modes","light","lightGradient","area","gradient","mouseLight","start","stop","loadModeOptions","sources","source","load","reset"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/interaction-light/browser/ExternalLighter.js"],"sourcesContent":["import { ExternalInteractorBase, isInArray, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { drawLight, lightMode } from \"./Utils.js\";\nimport { Light } from \"./Options/Classes/Light.js\";\nexport class ExternalLighter extends ExternalInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._engine = engine;\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = container.interactivity;\n        if (!options.interactivity.events.onHover.enable || interactivity.status !== \"pointermove\") {\n            return;\n        }\n        const mousePos = interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        container.canvas.draw(ctx => {\n            drawLight(container, ctx, mousePos);\n        });\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, interactivity = particle?.interactivity ?? container.actualOptions.interactivity, events = interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const res = isInArray(lightMode, events.onHover.mode);\n        if (res && interactivity.modes.light) {\n            const lightGradient = interactivity.modes.light.area.gradient;\n            container.canvas.mouseLight = {\n                start: rangeColorToRgb(this._engine, lightGradient.start),\n                stop: rangeColorToRgb(this._engine, lightGradient.stop),\n            };\n        }\n        return res;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.light) {\n            options.light = new Light();\n        }\n        for (const source of sources) {\n            options.light.load(source?.light);\n        }\n    }\n    reset() {\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,EAAEC,SAAS,EAAEC,eAAe,QAAS,qBAAqB;AACzF,SAASC,SAAS,EAAEC,SAAS,QAAQ,YAAY;AACjD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,OAAO,MAAMC,eAAe,SAASN,sBAAsB,CAAC;EACxDO,WAAWA,CAACC,SAAS,EAAEC,MAAM,EAAE;IAC3B,KAAK,CAACD,SAAS,CAAC;IAChB,IAAI,CAACE,OAAO,GAAGD,MAAM;EACzB;EACAE,KAAKA,CAAA,EAAG,CACR;EACAC,IAAIA,CAAA,EAAG,CACP;EACAC,QAAQA,CAAA,EAAG;IACP,MAAML,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEM,OAAO,GAAGN,SAAS,CAACO,aAAa;MAAEC,aAAa,GAAGR,SAAS,CAACQ,aAAa;IAC5G,IAAI,CAACF,OAAO,CAACE,aAAa,CAACC,MAAM,CAACC,OAAO,CAACC,MAAM,IAAIH,aAAa,CAACI,MAAM,KAAK,aAAa,EAAE;MACxF;IACJ;IACA,MAAMC,QAAQ,GAAGL,aAAa,CAACM,KAAK,CAACC,QAAQ;IAC7C,IAAI,CAACF,QAAQ,EAAE;MACX;IACJ;IACAb,SAAS,CAACgB,MAAM,CAACC,IAAI,CAACC,GAAG,IAAI;MACzBvB,SAAS,CAACK,SAAS,EAAEkB,GAAG,EAAEL,QAAQ,CAAC;IACvC,CAAC,CAAC;EACN;EACAM,SAASA,CAACC,QAAQ,EAAE;IAChB,MAAMpB,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEc,KAAK,GAAGd,SAAS,CAACQ,aAAa,CAACM,KAAK;MAAEN,aAAa,GAAGY,QAAQ,EAAEZ,aAAa,IAAIR,SAAS,CAACO,aAAa,CAACC,aAAa;MAAEC,MAAM,GAAGD,aAAa,CAACC,MAAM;IACxL,IAAI,EAAEA,MAAM,CAACC,OAAO,CAACC,MAAM,IAAIG,KAAK,CAACC,QAAQ,CAAC,EAAE;MAC5C,OAAO,KAAK;IAChB;IACA,MAAMM,GAAG,GAAG5B,SAAS,CAACG,SAAS,EAAEa,MAAM,CAACC,OAAO,CAACY,IAAI,CAAC;IACrD,IAAID,GAAG,IAAIb,aAAa,CAACe,KAAK,CAACC,KAAK,EAAE;MAClC,MAAMC,aAAa,GAAGjB,aAAa,CAACe,KAAK,CAACC,KAAK,CAACE,IAAI,CAACC,QAAQ;MAC7D3B,SAAS,CAACgB,MAAM,CAACY,UAAU,GAAG;QAC1BC,KAAK,EAAEnC,eAAe,CAAC,IAAI,CAACQ,OAAO,EAAEuB,aAAa,CAACI,KAAK,CAAC;QACzDC,IAAI,EAAEpC,eAAe,CAAC,IAAI,CAACQ,OAAO,EAAEuB,aAAa,CAACK,IAAI;MAC1D,CAAC;IACL;IACA,OAAOT,GAAG;EACd;EACAU,eAAeA,CAACzB,OAAO,EAAE,GAAG0B,OAAO,EAAE;IACjC,IAAI,CAAC1B,OAAO,CAACkB,KAAK,EAAE;MAChBlB,OAAO,CAACkB,KAAK,GAAG,IAAI3B,KAAK,CAAC,CAAC;IAC/B;IACA,KAAK,MAAMoC,MAAM,IAAID,OAAO,EAAE;MAC1B1B,OAAO,CAACkB,KAAK,CAACU,IAAI,CAACD,MAAM,EAAET,KAAK,CAAC;IACrC;EACJ;EACAW,KAAKA,CAAA,EAAG,CACR;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}