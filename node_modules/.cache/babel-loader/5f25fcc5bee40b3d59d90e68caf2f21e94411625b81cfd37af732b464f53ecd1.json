{"ast":null,"code":"import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst minStage = 0,\n  minDuration = 0;\nexport class Infecter {\n  constructor(container) {\n    this._nextInfectionStage = particle => {\n      const infectionOptions = this._container.actualOptions.infection,\n        {\n          infection\n        } = particle;\n      if (!infectionOptions || !infection) {\n        return;\n      }\n      const stagesCount = infectionOptions.stages.length;\n      if (stagesCount <= minStage || infection.stage === undefined) {\n        return;\n      }\n      infection.time = 0;\n      if (stagesCount <= ++infection.stage) {\n        if (infectionOptions.cure) {\n          delete infection.stage;\n          delete infection.time;\n        } else {\n          infection.stage = 0;\n          infection.time = 0;\n        }\n      }\n    };\n    this._container = container;\n  }\n  startInfection(particle, stage) {\n    const infectionOptions = this._container.actualOptions.infection,\n      {\n        infection\n      } = particle;\n    if (!infectionOptions || !infection) {\n      return;\n    }\n    const stages = infectionOptions.stages,\n      stagesCount = stages.length;\n    if (stage > stagesCount || stage < minStage) {\n      return;\n    }\n    infection.delay = 0;\n    infection.delayStage = stage;\n  }\n  updateInfection(particle, delta) {\n    const infectionOptions = this._container.actualOptions.infection,\n      {\n        infection\n      } = particle;\n    if (!infectionOptions || !infection) {\n      return;\n    }\n    const stages = infectionOptions.stages,\n      stagesCount = stages.length;\n    if (infection.delay !== undefined && infection.delayStage !== undefined) {\n      const stage = infection.delayStage;\n      if (stage > stagesCount || stage < minStage) {\n        return;\n      }\n      if (infection.delay >= infectionOptions.delay * millisecondsToSeconds) {\n        infection.stage = stage;\n        infection.time = 0;\n        delete infection.delay;\n        delete infection.delayStage;\n      } else {\n        infection.delay += delta;\n      }\n    } else {\n      delete infection.delay;\n      delete infection.delayStage;\n    }\n    if (infection.stage !== undefined && infection.time !== undefined) {\n      const infectionStage = stages[infection.stage];\n      if (infectionStage.duration !== undefined && infectionStage.duration >= minDuration) {\n        if (infection.time > infectionStage.duration * millisecondsToSeconds) {\n          this._nextInfectionStage(particle);\n        } else {\n          infection.time += delta;\n        }\n      } else {\n        infection.time += delta;\n      }\n    } else {\n      delete infection.stage;\n      delete infection.time;\n    }\n  }\n  updateInfectionStage(particle, stage) {\n    const options = this._container.actualOptions,\n      {\n        infection\n      } = particle;\n    if (!options.infection || !infection) {\n      return;\n    }\n    const stagesCount = options.infection.stages.length;\n    if (stage > stagesCount || stage < minStage || infection.stage !== undefined && infection.stage > stage) {\n      return;\n    }\n    infection.stage = stage;\n    infection.time = 0;\n  }\n}","map":{"version":3,"names":["millisecondsToSeconds","minStage","minDuration","Infecter","constructor","container","_nextInfectionStage","particle","infectionOptions","_container","actualOptions","infection","stagesCount","stages","length","stage","undefined","time","cure","startInfection","delay","delayStage","updateInfection","delta","infectionStage","duration","updateInfectionStage","options"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/plugin-infection/browser/Infecter.js"],"sourcesContent":["import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst minStage = 0, minDuration = 0;\nexport class Infecter {\n    constructor(container) {\n        this._nextInfectionStage = particle => {\n            const infectionOptions = this._container.actualOptions.infection, { infection } = particle;\n            if (!infectionOptions || !infection) {\n                return;\n            }\n            const stagesCount = infectionOptions.stages.length;\n            if (stagesCount <= minStage || infection.stage === undefined) {\n                return;\n            }\n            infection.time = 0;\n            if (stagesCount <= ++infection.stage) {\n                if (infectionOptions.cure) {\n                    delete infection.stage;\n                    delete infection.time;\n                }\n                else {\n                    infection.stage = 0;\n                    infection.time = 0;\n                }\n            }\n        };\n        this._container = container;\n    }\n    startInfection(particle, stage) {\n        const infectionOptions = this._container.actualOptions.infection, { infection } = particle;\n        if (!infectionOptions || !infection) {\n            return;\n        }\n        const stages = infectionOptions.stages, stagesCount = stages.length;\n        if (stage > stagesCount || stage < minStage) {\n            return;\n        }\n        infection.delay = 0;\n        infection.delayStage = stage;\n    }\n    updateInfection(particle, delta) {\n        const infectionOptions = this._container.actualOptions.infection, { infection } = particle;\n        if (!infectionOptions || !infection) {\n            return;\n        }\n        const stages = infectionOptions.stages, stagesCount = stages.length;\n        if (infection.delay !== undefined && infection.delayStage !== undefined) {\n            const stage = infection.delayStage;\n            if (stage > stagesCount || stage < minStage) {\n                return;\n            }\n            if (infection.delay >= infectionOptions.delay * millisecondsToSeconds) {\n                infection.stage = stage;\n                infection.time = 0;\n                delete infection.delay;\n                delete infection.delayStage;\n            }\n            else {\n                infection.delay += delta;\n            }\n        }\n        else {\n            delete infection.delay;\n            delete infection.delayStage;\n        }\n        if (infection.stage !== undefined && infection.time !== undefined) {\n            const infectionStage = stages[infection.stage];\n            if (infectionStage.duration !== undefined && infectionStage.duration >= minDuration) {\n                if (infection.time > infectionStage.duration * millisecondsToSeconds) {\n                    this._nextInfectionStage(particle);\n                }\n                else {\n                    infection.time += delta;\n                }\n            }\n            else {\n                infection.time += delta;\n            }\n        }\n        else {\n            delete infection.stage;\n            delete infection.time;\n        }\n    }\n    updateInfectionStage(particle, stage) {\n        const options = this._container.actualOptions, { infection } = particle;\n        if (!options.infection || !infection) {\n            return;\n        }\n        const stagesCount = options.infection.stages.length;\n        if (stage > stagesCount || stage < minStage || (infection.stage !== undefined && infection.stage > stage)) {\n            return;\n        }\n        infection.stage = stage;\n        infection.time = 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}