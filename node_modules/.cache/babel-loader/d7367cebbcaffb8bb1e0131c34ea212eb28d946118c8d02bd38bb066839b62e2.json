{"ast":null,"code":"import { errorPrefix, getRandom, isNumber, percentDenominator } from \"@tsparticles/engine\";\nconst half = 0.5,\n  origin = {\n    x: 0,\n    y: 0\n  },\n  defaultWidth = 0;\nexport function addParticlesFromCanvasPixels(container, data, position, scale, override, filter) {\n  const {\n      height,\n      width\n    } = data,\n    numPixels = height * width,\n    indexArray = shuffle(range(numPixels)),\n    maxParticles = Math.min(numPixels, container.actualOptions.particles.number.value),\n    canvasSize = container.canvas.size;\n  let selectedPixels = 0;\n  const positionOffset = {\n    x: canvasSize.width * position.x / percentDenominator - width * scale * half,\n    y: canvasSize.height * position.y / percentDenominator - height * scale * half\n  };\n  while (selectedPixels < maxParticles && indexArray.length) {\n    const defaultIndex = 0,\n      nextIndex = indexArray.pop() ?? defaultIndex,\n      pixelPos = {\n        x: nextIndex % width,\n        y: Math.floor(nextIndex / width)\n      },\n      pixel = data.pixels[pixelPos.y][pixelPos.x],\n      shouldCreateParticle = filter(pixel);\n    if (!shouldCreateParticle) {\n      continue;\n    }\n    const pos = {\n        x: pixelPos.x * scale + positionOffset.x,\n        y: pixelPos.y * scale + positionOffset.y\n      },\n      pOptions = {};\n    if (override.color) {\n      pOptions.color = {\n        value: pixel\n      };\n    }\n    if (override.opacity) {\n      pOptions.opacity = {\n        value: pixel.a\n      };\n    }\n    container.particles.addParticle(pos, pOptions);\n    selectedPixels++;\n  }\n}\nexport function getCanvasImageData(ctx, size, offset, clear = true) {\n  const imageData = ctx.getImageData(origin.x, origin.y, size.width, size.height).data;\n  if (clear) {\n    ctx.clearRect(origin.x, origin.y, size.width, size.height);\n  }\n  const pixels = [];\n  for (let i = 0; i < imageData.length; i += offset) {\n    const idx = i / offset,\n      pos = {\n        x: idx % size.width,\n        y: Math.floor(idx / size.width)\n      };\n    if (!pixels[pos.y]) {\n      pixels[pos.y] = [];\n    }\n    const indexesOffset = {\n        r: 0,\n        g: 1,\n        b: 2,\n        a: 3\n      },\n      alphaFactor = 255;\n    pixels[pos.y][pos.x] = {\n      r: imageData[i + indexesOffset.r],\n      g: imageData[i + indexesOffset.g],\n      b: imageData[i + indexesOffset.b],\n      a: imageData[i + indexesOffset.a] / alphaFactor\n    };\n  }\n  return {\n    pixels,\n    width: Math.min(...pixels.map(row => row.length)),\n    height: pixels.length\n  };\n}\nexport function getImageData(src, offset) {\n  const image = new Image();\n  image.crossOrigin = \"Anonymous\";\n  const p = new Promise((resolve, reject) => {\n    image.onerror = reject;\n    image.onload = () => {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const context = canvas.getContext(\"2d\");\n      if (!context) {\n        return reject(new Error(`${errorPrefix} Could not get canvas context`));\n      }\n      context.drawImage(image, origin.x, origin.y, image.width, image.height, origin.x, origin.y, canvas.width, canvas.height);\n      resolve(getCanvasImageData(context, canvas, offset));\n    };\n  });\n  image.src = src;\n  return p;\n}\nexport function getTextData(textOptions, offset) {\n  const canvas = document.createElement(\"canvas\"),\n    context = canvas.getContext(\"2d\"),\n    {\n      font,\n      text,\n      lines: linesOptions,\n      color\n    } = textOptions;\n  if (!text || !context) {\n    return;\n  }\n  const lines = text.split(linesOptions.separator),\n    fontSize = isNumber(font.size) ? `${font.size}px` : font.size,\n    linesData = [];\n  let maxWidth = 0,\n    totalHeight = 0;\n  for (const line of lines) {\n    context.font = `${font.style ?? \"\"} ${font.variant ?? \"\"} ${font.weight ?? \"\"} ${fontSize} ${font.family}`;\n    const measure = context.measureText(line),\n      lineData = {\n        measure,\n        text: line,\n        height: measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent,\n        width: measure.width\n      };\n    maxWidth = Math.max(maxWidth || defaultWidth, lineData.width);\n    totalHeight += lineData.height + linesOptions.spacing;\n    linesData.push(lineData);\n  }\n  canvas.width = maxWidth;\n  canvas.height = totalHeight;\n  let currentHeight = 0;\n  for (const line of linesData) {\n    context.font = `${font.style ?? \"\"} ${font.variant ?? \"\"} ${font.weight ?? \"\"} ${fontSize} ${font.family}`;\n    context.fillStyle = color;\n    context.fillText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n    currentHeight += line.height + linesOptions.spacing;\n  }\n  return getCanvasImageData(context, canvas, offset);\n}\nfunction shuffle(array) {\n  const lengthOffset = 1,\n    minIndex = 0;\n  for (let currentIndex = array.length - lengthOffset; currentIndex >= minIndex; currentIndex--) {\n    const randomIndex = Math.floor(getRandom() * currentIndex);\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n  return array;\n}\nconst range = n => [...Array(n).keys()];","map":{"version":3,"names":["errorPrefix","getRandom","isNumber","percentDenominator","half","origin","x","y","defaultWidth","addParticlesFromCanvasPixels","container","data","position","scale","override","filter","height","width","numPixels","indexArray","shuffle","range","maxParticles","Math","min","actualOptions","particles","number","value","canvasSize","canvas","size","selectedPixels","positionOffset","length","defaultIndex","nextIndex","pop","pixelPos","floor","pixel","pixels","shouldCreateParticle","pos","pOptions","color","opacity","a","addParticle","getCanvasImageData","ctx","offset","clear","imageData","getImageData","clearRect","i","idx","indexesOffset","r","g","b","alphaFactor","map","row","src","image","Image","crossOrigin","p","Promise","resolve","reject","onerror","onload","document","createElement","context","getContext","Error","drawImage","getTextData","textOptions","font","text","lines","linesOptions","split","separator","fontSize","linesData","maxWidth","totalHeight","line","style","variant","weight","family","measure","measureText","lineData","actualBoundingBoxAscent","actualBoundingBoxDescent","max","spacing","push","currentHeight","fillStyle","fillText","array","lengthOffset","minIndex","currentIndex","randomIndex","n","Array","keys"],"sources":["/Users/nyanaung/repos/portfolio/node_modules/@tsparticles/plugin-canvas-mask/browser/utils.js"],"sourcesContent":["import { errorPrefix, getRandom, isNumber, percentDenominator, } from \"@tsparticles/engine\";\nconst half = 0.5, origin = {\n    x: 0,\n    y: 0,\n}, defaultWidth = 0;\nexport function addParticlesFromCanvasPixels(container, data, position, scale, override, filter) {\n    const { height, width } = data, numPixels = height * width, indexArray = shuffle(range(numPixels)), maxParticles = Math.min(numPixels, container.actualOptions.particles.number.value), canvasSize = container.canvas.size;\n    let selectedPixels = 0;\n    const positionOffset = {\n        x: (canvasSize.width * position.x) / percentDenominator - width * scale * half,\n        y: (canvasSize.height * position.y) / percentDenominator - height * scale * half,\n    };\n    while (selectedPixels < maxParticles && indexArray.length) {\n        const defaultIndex = 0, nextIndex = indexArray.pop() ?? defaultIndex, pixelPos = {\n            x: nextIndex % width,\n            y: Math.floor(nextIndex / width),\n        }, pixel = data.pixels[pixelPos.y][pixelPos.x], shouldCreateParticle = filter(pixel);\n        if (!shouldCreateParticle) {\n            continue;\n        }\n        const pos = {\n            x: pixelPos.x * scale + positionOffset.x,\n            y: pixelPos.y * scale + positionOffset.y,\n        }, pOptions = {};\n        if (override.color) {\n            pOptions.color = {\n                value: pixel,\n            };\n        }\n        if (override.opacity) {\n            pOptions.opacity = {\n                value: pixel.a,\n            };\n        }\n        container.particles.addParticle(pos, pOptions);\n        selectedPixels++;\n    }\n}\nexport function getCanvasImageData(ctx, size, offset, clear = true) {\n    const imageData = ctx.getImageData(origin.x, origin.y, size.width, size.height).data;\n    if (clear) {\n        ctx.clearRect(origin.x, origin.y, size.width, size.height);\n    }\n    const pixels = [];\n    for (let i = 0; i < imageData.length; i += offset) {\n        const idx = i / offset, pos = {\n            x: idx % size.width,\n            y: Math.floor(idx / size.width),\n        };\n        if (!pixels[pos.y]) {\n            pixels[pos.y] = [];\n        }\n        const indexesOffset = {\n            r: 0,\n            g: 1,\n            b: 2,\n            a: 3,\n        }, alphaFactor = 255;\n        pixels[pos.y][pos.x] = {\n            r: imageData[i + indexesOffset.r],\n            g: imageData[i + indexesOffset.g],\n            b: imageData[i + indexesOffset.b],\n            a: imageData[i + indexesOffset.a] / alphaFactor,\n        };\n    }\n    return {\n        pixels,\n        width: Math.min(...pixels.map(row => row.length)),\n        height: pixels.length,\n    };\n}\nexport function getImageData(src, offset) {\n    const image = new Image();\n    image.crossOrigin = \"Anonymous\";\n    const p = new Promise((resolve, reject) => {\n        image.onerror = reject;\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return reject(new Error(`${errorPrefix} Could not get canvas context`));\n            }\n            context.drawImage(image, origin.x, origin.y, image.width, image.height, origin.x, origin.y, canvas.width, canvas.height);\n            resolve(getCanvasImageData(context, canvas, offset));\n        };\n    });\n    image.src = src;\n    return p;\n}\nexport function getTextData(textOptions, offset) {\n    const canvas = document.createElement(\"canvas\"), context = canvas.getContext(\"2d\"), { font, text, lines: linesOptions, color } = textOptions;\n    if (!text || !context) {\n        return;\n    }\n    const lines = text.split(linesOptions.separator), fontSize = isNumber(font.size) ? `${font.size}px` : font.size, linesData = [];\n    let maxWidth = 0, totalHeight = 0;\n    for (const line of lines) {\n        context.font = `${font.style ?? \"\"} ${font.variant ?? \"\"} ${font.weight ?? \"\"} ${fontSize} ${font.family}`;\n        const measure = context.measureText(line), lineData = {\n            measure,\n            text: line,\n            height: measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent,\n            width: measure.width,\n        };\n        maxWidth = Math.max(maxWidth || defaultWidth, lineData.width);\n        totalHeight += lineData.height + linesOptions.spacing;\n        linesData.push(lineData);\n    }\n    canvas.width = maxWidth;\n    canvas.height = totalHeight;\n    let currentHeight = 0;\n    for (const line of linesData) {\n        context.font = `${font.style ?? \"\"} ${font.variant ?? \"\"} ${font.weight ?? \"\"} ${fontSize} ${font.family}`;\n        context.fillStyle = color;\n        context.fillText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n        currentHeight += line.height + linesOptions.spacing;\n    }\n    return getCanvasImageData(context, canvas, offset);\n}\nfunction shuffle(array) {\n    const lengthOffset = 1, minIndex = 0;\n    for (let currentIndex = array.length - lengthOffset; currentIndex >= minIndex; currentIndex--) {\n        const randomIndex = Math.floor(getRandom() * currentIndex);\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n}\nconst range = (n) => [...Array(n).keys()];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}